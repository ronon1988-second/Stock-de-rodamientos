/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control model with 'admin' and 'editor' roles.
 * Admins have full control over plant structure and user management.
 * Editors can manage inventory and log usage.
 * All authenticated users have read access to all data.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /roles/{userId}: Stores user roles ('admin' or 'editor').
 * - /sectors/{sectorId}: Stores sector information.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine information within sectors.
 * - /inventory/{inventoryId}: Stores inventory item information.
 * - /machineAssignments/{assignmentId}: Stores machine assignment information.
 * - /usageLog/{usageLogId}: Stores usage log information.
 *
 * Key Security Decisions:
 * - Public read access is granted to all collections EXCEPT the 'users' and 'roles' collections.
 * - Only authenticated users can access the 'users' and 'roles' collections, with write access limited to the owner of the document and admins.
 * - Roles are stored in a separate 'roles' collection for easy management.
 * - The rules do not enforce strict schema validation to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The rules rely on the 'roles' collection to determine user roles.
 *   Consider denormalizing the user's role directly into the user's profile document
 *   or into the documents they are allowed to edit for simpler and more performant rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * Used for update and delete operations to ensure the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user has the 'editor' role.
     */
    function isEditor() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'editor' || isAdmin();
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description Rules for the /roles/{userId} collection.
     * @path /roles/{userId}
     * @allow (create) User with UID 'admin123' can create a role document for themselves if they are an admin.
     * @allow (get) User with UID 'user123' can read their own role.
     * @deny (create) User with UID 'user456' cannot create a role document for 'user123'.
     * @principle Enforces document ownership for reads and admin-only writes.
     */
    match /roles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for the /sectors/{sectorId} collection.
     * @path /sectors/{sectorId}
     * @allow (get) Any signed-in user can read sector information.
     * @allow (create) Only admins can create sectors.
     * @deny (delete) Non-admins cannot delete sectors.
     * @principle Grants public read access and restricts writes to admins.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /sectors/{sectorId}/machines/{machineId} collection.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get) Any signed-in user can read machine information.
     * @allow (create) Only admins can create machines.
     * @deny (delete) Non-admins cannot delete machines.
     * @principle Grants public read access and restricts writes to admins.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /inventory/{inventoryId} collection.
     * @path /inventory/{inventoryId}
     * @allow (get) Any signed-in user can read inventory item information.
     * @allow (create) Only editors and admins can create inventory items.
     * @deny (delete) Non-editors/admins cannot delete inventory items.
     * @principle Grants public read access and restricts writes to editors and admins.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isEditor();
      allow update: if isSignedIn() && isEditor() && resource != null;
      allow delete: if isSignedIn() && isEditor() && resource != null;
    }

    /**
     * @description Rules for the /machineAssignments/{assignmentId} collection.
     * @path /machineAssignments/{assignmentId}
     * @allow (get) Any signed-in user can read machine assignment information.
     * @allow (create) Only editors and admins can create machine assignments.
     * @deny (delete) Non-editors/admins cannot delete machine assignments.
     * @principle Grants public read access and restricts writes to editors and admins.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isEditor();
      allow update: if isSignedIn() && isEditor() && resource != null;
      allow delete: if isSignedIn() && isEditor() && resource != null;
    }

    /**
     * @description Rules for the /usageLog/{usageLogId} collection.
     * @path /usageLog/{usageLogId}
     * @allow (get) Any signed-in user can read usage log information.
     * @allow (create) Only editors and admins can create usage log entries.
     * @deny (delete) No one can delete usage log entries.
     * @principle Grants public read access and restricts writes to editors and admins.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isEditor();
      allow update: if false;
      allow delete: if false;
    }
  }
}