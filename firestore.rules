/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control model with "admin" and "editor" roles.
 * All authenticated users can read all data. Admins have full control over sectors and machines.
 * Editors can manage inventory items, machine assignments, and create usage logs.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /roles/{userId}: Stores user roles (admin, editor).
 * - /sectors/{sectorId}: Stores sector data.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine data within sectors.
 * - /inventory/{inventoryId}: Stores inventory item data.
 * - /machineAssignments/{assignmentId}: Stores machine assignment data.
 * - /usageLog/{usageLogId}: Stores usage log data.
 *
 * Key Security Decisions:
 * - All authenticated users can read all collections to maintain visibility.
 * - User listing is disallowed.
 * - Role-based access control is enforced for write operations on sectors, machines, inventory, assignments, and usage logs.
 *
 * Denormalization for Authorization:
 * - User roles are stored in the 'roles' collection to simplify role checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the requested user ID.
     */
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user has the 'editor' role.
     */
    function isEditor() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'editor';
    }
    
    /**
     * @description Checks if the user is an existing owner (signed in and document exists).
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile.
     * @deny (create) User with UID 'user123' tries to create a profile for 'user456'.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for user roles.
     * @path /roles/{userId}
     * @allow (get) Any signed-in user can get role
     * @deny (create) User with UID 'user123' tries to create a role for 'user456'.
     * @principle Enforces user-ownership for role data.
     */
    match /roles/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
     /**
      * @description Rules for sectors.
      * @path /sectors/{sectorId}
      * @allow (get, list) Any signed-in user can read sector data.
      * @allow (create, update, delete) Only admins can modify sector data.
      * @deny (create) Non-admin user attempts to create a sector.
      * @principle Enforces admin-only writes for sector data.
      */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for machines within sectors.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) Any signed-in user can read machine data.
     * @allow (create, update, delete) Only admins can modify machine data.
     * @deny (create) Non-admin user attempts to create a machine.
     * @principle Enforces admin-only writes for machine data.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for inventory items.
     * @path /inventory/{inventoryId}
     * @allow (get, list) Any signed-in user can read inventory data.
     * @allow (create, update, delete) Only editors and admins can modify inventory data.
     * @deny (create) Non-editor/admin user attempts to create an inventory item.
     * @principle Enforces editor/admin-only writes for inventory data.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor() || isAdmin();
      allow update: if (isEditor() || isAdmin()) && resource != null;
      allow delete: if (isEditor() || isAdmin()) && resource != null;
    }

    /**
     * @description Rules for machine assignments.
     * @path /machineAssignments/{assignmentId}
     * @allow (get, list) Any signed-in user can read machine assignment data.
     * @allow (create, update, delete) Only editors and admins can modify machine assignment data.
     * @deny (create) Non-editor/admin user attempts to create a machine assignment.
     * @principle Enforces editor/admin-only writes for machine assignment data.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor() || isAdmin();
      allow update: if (isEditor() || isAdmin()) && resource != null;
      allow delete: if (isEditor() || isAdmin()) && resource != null;
    }

    /**
     * @description Rules for usage logs.
     * @path /usageLog/{usageLogId}
     * @allow (get, list) Any signed-in user can read usage log data.
     * @allow (create) Only editors and admins can create usage logs.
     * @deny (create) Non-editor/admin user attempts to create a usage log.
     * @principle Enforces editor/admin-only creation for usage logs.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor() || isAdmin();
      allow update: if false;
      allow delete: if false;
    }
  }
}