/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy: This ruleset prioritizes a secure, owner-centric model for user data while allowing public read access where appropriate. It avoids complex data validation in favor of rapid development.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}` and are accessible only to the owning user.
 * - Sectors, Machines, InventoryItems and MachineAssignments are publicly readable.
 * - Usage Logs are restricted to authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - All write operations require authentication.
 * - Data validation is minimal, focusing on ownership and relationship integrity.
 *
 * Denormalization for Authorization:  Ownership is enforced by matching the `request.auth.uid` against document IDs in user-owned collections and fields in public collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-specific data access for profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @deny (create) User with UID 'user456' cannot create profile for 'user123'.
     * @allow (get) User with UID 'user123' can read their profile.
     * @deny (get) User with UID 'user456' cannot read profile of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to sectors, with owner-only writes.
     * @path /databases/{database}/documents/sectors/{sectorId}
     * @allow (get, list) Any user can read sectors.
     * @deny (create, update, delete) Only the owner (creator) can modify sectors.
     * @principle Public read access with owner-only writes.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Sector' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Allows public read access to machines, with owner-only writes.
     * @path /databases/{database}/documents/machines/{machineId}
     * @allow (get, list) Any user can read machines.
     * @deny (create, update, delete) Only the owner (creator) can modify machines.
     * @principle Public read access with owner-only writes.
     */
    match /machines/{machineId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'Machine' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Allows public read access to inventory items, with owner-only writes.
     * @path /databases/{database}/documents/inventoryItems/{itemId}
     * @allow (get, list) Any user can read inventory items.
     * @deny (create, update, delete) Only the owner (creator) can modify inventory items.
     * @principle Public read access with owner-only writes.
     */
    match /inventoryItems/{itemId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'InventoryItem' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Allows public read access to machine assignments, with owner-only writes.
     * @path /databases/{database}/documents/machineAssignments/{assignmentId}
     * @allow (get, list) Any user can read machine assignments.
     * @deny (create, update, delete) Only the owner (creator) can modify machine assignments.
     * @principle Public read access with owner-only writes.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'MachineAssignment' entity is missing an 'ownerId' or 'authorId' field.
    }

        /**
     * @description Allows authenticated users to list usage logs.
     * @path /databases/{database}/documents/usageLog
     * @allow (list) Any authenticated user can list usage logs.
     * @deny (create, get, update, delete) No one can create, get, update or delete usage logs.
     * @principle Authenticated users can list usage logs.
     */
    match /usageLog {
      allow list: if isSignedIn();
      allow get: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}