/**
 * @fileoverview Firestore Security Rules for the Plant Management Application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control (RBAC) model. Users are assigned roles (admin, editor) which determine their permissions.
 * All authenticated users can read most data, while administrative roles can create, update, and delete specific resources.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles with roles. The {userId} MUST match the Firebase Auth UID.
 * - /sectors/{sectorId}: Stores sector information.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine information within a sector.
 * - /inventory/{inventoryId}: Stores inventory item information.
 * - /machineAssignments/{assignmentId}: Stores machine assignment information.
 * - /usageLog/{usageLogId}: Stores usage log data.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Read access is generally open to all authenticated users.
 * - Write access is restricted to roles with the appropriate privileges (admin, editor).
 * - `create`, `update`, and `delete` operations are never permitted with `if true;` and are always protected by an authorization check based on roles.
 *
 * Denormalization for Authorization:
 *  This implementation does not require denormalization.  The user's role is stored in their `/users/{userId}` document, and this can be verified using the `get()` function in the rules, where needed.
 *
 * Structural Segregation:
 *  The security model relies on role-based access control rather than segregating data into private and public collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the requested user ID.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user exists and their ID matches the requested user ID.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
       return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user has the 'editor' role.
     * @return {bool} True if the user is an editor, false otherwise.
     */
    function isEditor() {
       return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'editor';
    }
    
    /**
     * @description Rule for user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'dVL4Gp9HwaXRHLCoTj7BAJs9DrY2' can create their profile if request.auth.uid == userId.
     * @deny (create) User with UID 'dVL4Gp9HwaXRHLCoTj7BAJs9DrY2' cannot create a profile for another user.
     * @allow (get) User with UID 'dVL4Gp9HwaXRHLCoTj7BAJs9DrY2' can get their profile.
     * @deny (list) All users cannot list all user profiles.
     * @allow (update) User with UID 'dVL4Gp9HwaXRHLCoTj7BAJs9DrY2' can update their profile.
     * @allow (delete) User with UID 'dVL4Gp9HwaXRHLCoTj7BAJs9DrY2' can delete their profile.
     * @principle Enforces user-ownership for writes to their own profile.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for sector documents.
     * @path /sectors/{sectorId}
     * @allow (get) Any signed-in user can read a sector.
     * @allow (list) Any signed-in user can list sectors.
     * @allow (create) Only admins can create sectors.
     * @deny (update) Non-admins cannot update sectors.
     * @deny (delete) Non-admins cannot delete sectors.
     * @principle Enforces admin-only writes for managing sectors.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rule for machine documents within sectors.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get) Any signed-in user can read a machine.
     * @allow (list) Any signed-in user can list machines within a sector.
     * @allow (create) Only admins can create machines.
     * @deny (update) Non-admins cannot update machines.
     * @deny (delete) Non-admins cannot delete machines.
     * @principle Enforces admin-only writes for managing machines.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rule for inventory item documents.
     * @path /inventory/{inventoryId}
     * @allow (get) Any signed-in user can read an inventory item.
     * @allow (list) Any signed-in user can list inventory items.
     * @allow (create) Only editors or admins can create inventory items.
     * @deny (update) Non-editors/admins cannot update inventory items.
     * @deny (delete) Non-editors/admins cannot delete inventory items.
     * @principle Enforces editor/admin-only writes for managing inventory items.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
      allow delete: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
    }

    /**
     * @description Rule for machine assignment documents.
     * @path /machineAssignments/{assignmentId}
     * @allow (get) Any signed-in user can read a machine assignment.
     * @allow (list) Any signed-in user can list machine assignments.
     * @allow (create) Only editors or admins can create machine assignments.
     * @deny (update) Non-editors/admins cannot update machine assignments.
     * @deny (delete) Non-editors/admins cannot delete machine assignments.
     * @principle Enforces editor/admin-only writes for managing machine assignments.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
      allow delete: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
    }

    /**
     * @description Rule for usage log documents.
     * @path /usageLog/{usageLogId}
     * @allow (get) Any signed-in user can read a usage log.
     * @allow (list) Any signed-in user can list usage logs.
     * @allow (create) Only editors or admins can create usage logs.
     * @deny (update) Usage logs cannot be updated.
     * @deny (delete) Usage logs cannot be deleted.
     * @principle Enforces editor/admin-only writes for creating usage logs.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if false;
      allow delete: if false;
    }
  }
}