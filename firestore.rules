/**
 * @fileoverview Firestore Security Rules for the rodamiento stock app.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where users have different levels of access
 * based on their assigned role (admin, editor, or regular user). It prioritizes security by default,
 * restricting access unless explicitly granted.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Only admins can list all users, but
 *   any authenticated user can read their own profile.
 * - /roles/{userId}: Stores the role for each user. Only the user themselves can read their own role.
 * - /inventory/{itemId}: Stores global inventory information. All authenticated users can read,
 *   but only admins or editors can write.
 * - /sectors/{sectorId}: Stores sector information. All authenticated users can read. Admins and editors can write.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine information within a sector. Authenticated users can read, admins and editors write.
 * - /machineAssignments/{assignmentId}: Stores assignments of inventory items to machines. All authenticated users can read. Admins and editors write.
 * - /usageLog/{logId}: Stores historical usage logs. All authenticated users can read, admins and editors write.
 *
 * Key Security Decisions:
 * - User listing is restricted to admins only to prevent unauthorized data harvesting.
 * - The /roles/{userId} collection is strictly read-only for the user themselves, enforcing self-service role determination.
 * - All write operations on core data collections (/inventory, /sectors, /machines, /machineAssignments, /usageLog)
 *   are restricted to admins and editors.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read their own role document.
     * @path /roles/{userId}
     * @allow (get) User 'test_user' with UID 'test_user' can read their own role.
     * @deny (get) User 'another_user' with UID 'another_user' cannot read 'test_user's role.
     * @principle Enforces strict user-ownership for role documents.
     */
    match /roles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to read all user profiles.
     * @path /users/{userId}
     * @allow (list) Admin user can list all user profiles.
     * @deny (list) Non-admin user cannot list all user profiles.
     * @principle Restricts user listing to admin roles.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Allows authenticated users to read articles, and admins/editors to write.
     * @path /articles/{articleId}
     * @allow (get, list) Any authenticated user can read articles.
     * @allow (create, update, delete) Admin or editor can write articles.
     * @deny (create, update, delete) Regular user cannot write articles.
     * @principle Role-based access control for content management.
     */
    match /articles/{articleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (isAdmin() || isEditor());
    }

    /**
     * @description Allows authenticated users to read inventory items, and admins/editors to write.
     * @path /inventory/{itemId}
     * @allow (get, list) Any authenticated user can read inventory items.
     * @allow (create, update, delete) Admin or editor can write inventory items.
     * @deny (create, update, delete) Regular user cannot write inventory items.
     * @principle Role-based access control for inventory management.
     */
    match /inventory/{itemId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (isAdmin() || isEditor());
    }

      /**
       * @description Allows authenticated users to read sectors, and admins/editors to write.
       * @path /sectors/{sectorId}
       * @allow (get, list) Any authenticated user can read sectors.
       * @allow (create, update, delete) Admin or editor can write sectors.
       * @deny (create, update, delete) Regular user cannot write sectors.
       * @principle Role-based access control for sector management.
       */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (isAdmin() || isEditor());
    }

    /**
     * @description Allows authenticated users to read machines within sectors, and admins/editors to write.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) Any authenticated user can read machines within sectors.
     * @allow (create, update, delete) Admin or editor can write machines within sectors.
     * @deny (create, update, delete) Regular user cannot write machines within sectors.
     * @principle Role-based access control for machine management within sectors.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (isAdmin() || isEditor());
    }

      /**
       * @description Allows authenticated users to read machine assignments, and admins/editors to write.
       * @path /machineAssignments/{assignmentId}
       * @allow (get, list) Any authenticated user can read machine assignments.
       * @allow (create, update, delete) Admin or editor can write machine assignments.
       * @deny (create, update, delete) Regular user cannot write machine assignments.
       * @principle Role-based access control for machine assignment management.
       */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (isAdmin() || isEditor());
    }

      /**
       * @description Allows authenticated users to read usage logs, and admins/editors to write.
       * @path /usageLog/{logId}
       * @allow (get, list) Any authenticated user can read usage logs.
       * @allow (create, update, delete) Admin or editor can write usage logs.
       * @deny (create, update, delete) Regular user cannot write usage logs.
       * @principle Role-based access control for usage log management.
       */
    match /usageLog/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (isAdmin() || isEditor());
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.admin == true;
    }

    function isEditor() {
      return request.auth.token.editor == true;
    }
  }
}