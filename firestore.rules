/**
 * @fileoverview Firestore Security Rules
 *
 * Core Philosophy:
 * This ruleset enforces a tiered access control model, primarily based on user roles and ownership.
 * User profiles and roles are strictly managed, while inventory and machine data are broadly accessible with restricted write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information, accessible only to the user themselves.
 * - /roles/{userId}: Stores user roles (e.g., admin, editor), accessible only to admins.
 * - /inventory/{itemId}: Global inventory of items.
 * - /sectors/{sectorId}: Sectors in the plant.
 * - /sectors/{sectorId}/machines/{machineId}: Machines within each sector.
 * - /machineAssignments/{assignmentId}: Assignments of inventory items to machines.
 * - /usageLog/{logId}: Logs of inventory item usage.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized data scraping.
 * - Roles are stored separately from profiles for enhanced security.
 * - Most data is readable by all authenticated users, but write access is limited to specific roles.
 *
 * Denormalization for Authorization:
 *  - While not explicitly present in this schema, consider adding fields like `ownerId` to documents if finer-grained ownership-based access control is needed in the future.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users.
     * @path /users
     * @allow None
     * @deny list
     * @principle Prevents information disclosure.
     */
    match /users {
      allow list: if false;
    }

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - Authenticated user with matching userId.
     * @deny (get, create, update, delete) - Any other user attempting to access this data.
     * @principle Enforces user-ownership.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows admins to read and manage user roles.
     * @path /roles/{userId}
     * @allow (get, create, update, delete) - Admin users.
     * @deny (get, create, update, delete) - Non-admin users.
     * @principle Enforces role-based access control.
     */
    match /roles/{userId} {
      allow get: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows anyone to read inventory items, but restricts creation, updates, and deletions.
     * @path /inventory/{itemId}
     * @allow (get, list) - Any user.
     * @allow (create, update, delete) - Admin users only.
     * @deny (create, update, delete) - Non-admin users.
     * @principle Public read access with admin-restricted writes.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows anyone to read sectors, but restricts creation, updates, and deletions.
     * @path /sectors/{sectorId}
     * @allow (get, list) - Any user.
     * @allow (create, update, delete) - Admin users only.
     * @deny (create, update, delete) - Non-admin users.
     * @principle Public read access with admin-restricted writes.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows anyone to read machine data, but restricts creation, updates, and deletions.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) - Any user.
     * @allow (create, update, delete) - Admin users only.
     * @deny (create, update, delete) - Non-admin users.
     * @principle Public read access with admin-restricted writes.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if true;
      allow create: if isAdmin() && request.resource.data.sectorId == sectorId;
      allow update: if isAdmin() && resource != null && request.resource.data.sectorId == sectorId;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Allows anyone to read machine assignments, but restricts creation, updates, and deletions.
      * @path /machineAssignments/{assignmentId}
      * @allow (get, list) - Any user.
      * @allow (create, update, delete) - Admin users only.
      * @deny (create, update, delete) - Non-admin users.
      * @principle Public read access with admin-restricted writes.
      */
    match /machineAssignments/{assignmentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows anyone to read usage logs, but restricts creation, updates, and deletions.
     * @path /usageLog/{logId}
     * @allow (get, list) - Any user.
     * @allow (create, update, delete) - Admin users only.
     * @deny (create, update, delete) - Non-admin users.
     * @principle Public read access with admin-restricted writes.
     */
    match /usageLog/{logId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the resource's UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
      return request.auth.token.admin == true;
    }
  }
}