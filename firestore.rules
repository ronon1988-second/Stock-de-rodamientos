/**
 * @fileoverview Firestore Security Rules for the Plant Manager application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control model.
 * Authenticated users can read all data.
 * Administrative roles ('admin', 'editor') are required to modify data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, including their role.
 * - /sectors/{sectorId}: Stores sector information.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine information within each sector.
 * - /inventory/{inventoryId}: Stores inventory item information.
 * - /machineAssignments/{assignmentId}: Stores machine assignment information.
 * - /usageLog/{usageLogId}: Stores usage log information.
 *
 * Key Security Decisions:
 * - Only authenticated users can access data.
 * - List access for /users collection is explicitly denied.
 * - 'admin' role has full access to sectors and machines.
 * - 'editor' role has access to inventory, machine assignments and can create usage logs.
 *
 * Denormalization for Authorization:
 * User roles are stored directly in the /users/{userId} document for efficient role checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the requested user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user has the specified role.
     */
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return hasRole('admin');
    }

    /**
     * @description Checks if the user is an editor.
     */
    function isEditor() {
      return hasRole('editor');
    }

    /**
     * @description Checks if the document exists and the user is the owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile.
     * @allow (get) User with UID 'user123' retrieves their profile.
     * @allow (update) User with UID 'user123' updates their profile.
     * @allow (delete) User with UID 'user123' deletes their profile.
     * @deny (create) User with UID 'user123' tries to create a profile for 'user456'.
     * @deny (get) Unauthenticated user tries to read any profile.
     * @principle Enforces document ownership for writes, authenticated read access.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      // Prevents listing all users
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages sectors; readable by all, writeable by admins.
     * @path /sectors/{sectorId}
     * @allow (get) Any signed-in user can retrieve sector data.
     * @allow (list) Any signed-in user can list sectors.
     * @allow (create) An admin creates a new sector.
     * @allow (update) An admin updates an existing sector.
     * @allow (delete) An admin deletes a sector.
     * @deny (create) A non-admin attempts to create a sector.
     * @deny (update) A non-admin attempts to update a sector.
     * @deny (delete) A non-admin attempts to delete a sector.
     * @principle Restricts write access to admins.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages machines within sectors; readable by all, writeable by admins.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get) Any signed-in user can retrieve machine data.
     * @allow (list) Any signed-in user can list machines in a sector.
     * @allow (create) An admin creates a new machine in a sector.
     * @allow (update) An admin updates an existing machine in a sector.
     * @allow (delete) An admin deletes a machine from a sector.
     * @deny (create) A non-admin attempts to create a machine.
     * @deny (update) A non-admin attempts to update a machine.
     * @deny (delete) A non-admin attempts to delete a machine.
     * @principle Restricts write access to admins.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages inventory items; readable by all, writeable by editors and admins.
     * @path /inventory/{inventoryId}
     * @allow (get) Any signed-in user can retrieve inventory data.
     * @allow (list) Any signed-in user can list inventory items.
     * @allow (create) An editor or admin creates a new inventory item.
     * @allow (update) An editor or admin updates an existing inventory item.
     * @allow (delete) An editor or admin deletes an inventory item.
     * @deny (create) A non-editor/admin attempts to create an inventory item.
     * @deny (update) A non-editor/admin attempts to update an inventory item.
     * @deny (delete) A non-editor/admin attempts to delete an inventory item.
     * @principle Restricts write access to editors and admins.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor() || isAdmin();
      allow update: if (isEditor() || isAdmin()) && resource != null;
      allow delete: if (isEditor() || isAdmin()) && resource != null;
    }

    /**
     * @description Manages machine assignments; readable by all, writeable by editors and admins.
     * @path /machineAssignments/{assignmentId}
     * @allow (get) Any signed-in user can retrieve machine assignment data.
     * @allow (list) Any signed-in user can list machine assignments.
     * @allow (create) An editor or admin creates a new machine assignment.
     * @allow (update) An editor or admin updates an existing machine assignment.
     * @allow (delete) An editor or admin deletes a machine assignment.
     * @deny (create) A non-editor/admin attempts to create a machine assignment.
     * @deny (update) A non-editor/admin attempts to update a machine assignment.
     * @deny (delete) A non-editor/admin attempts to delete a machine assignment.
     * @principle Restricts write access to editors and admins.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor() || isAdmin();
      allow update: if (isEditor() || isAdmin()) && resource != null;
      allow delete: if (isEditor() || isAdmin()) && resource != null;
    }

    /**
     * @description Manages usage logs; readable by all, createable by editors and admins.
     * @path /usageLog/{usageLogId}
     * @allow (get) Any signed-in user can retrieve usage log data.
     * @allow (list) Any signed-in user can list usage logs.
     * @allow (create) An editor or admin creates a new usage log.
     * @deny (create) A non-editor/admin attempts to create a usage log.
     * @principle Restricts create access to editors and admins, public read access.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor() || isAdmin();
      allow update, delete: if false;
    }
  }
}