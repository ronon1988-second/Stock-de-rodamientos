/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid development and ease of use by providing open access to all data.
 * It is crucial to replace these rules with more restrictive ones before deploying to production.
 *
 * Data Structure:
 * - /inventory/{itemId}: Stores global inventory items.
 * - /sectors/{sectorId}: Stores sector information.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine information within sectors.
 * - /machineAssignments/{assignmentId}: Stores assignments of inventory items to machines.
 * - /usageLog/{logId}: Stores logs of item usage.
 * - /users/{userId}: Stores user profile information.
 * - /roles/{userId}: Stores user roles.
 *
 * Key Security Decisions:
 * - All reads and writes are currently allowed for all users.
 * - This is for prototyping only and MUST be secured before production.
 * - Authentication is not enforced.
 *
 * WARNING: This ruleset is INSECURE and should only be used for local development and prototyping.
 *          It allows unrestricted access to your Firestore database.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows all reads and writes to the inventory collection.
     * @path /inventory/{itemId}
     * @allow (get, list, create, update, delete) Any user can perform any operation.
     * @deny None.
     * @principle Open access for prototyping.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows all reads and writes to the sectors collection.
     * @path /sectors/{sectorId}
     * @allow (get, list, create, update, delete) Any user can perform any operation.
     * @deny None.
     * @principle Open access for prototyping.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create, update, delete: if true;

      /**
       * @description Allows all reads and writes to the machines subcollection within a sector.
       * @path /sectors/{sectorId}/machines/{machineId}
       * @allow (get, list, create, update, delete) Any user can perform any operation.
       * @deny None.
       * @principle Open access for prototyping.
       */
      match /machines/{machineId} {
        allow get, list: if true;
        allow create, update, delete: if true;
      }
    }

    /**
     * @description Allows all reads and writes to the machineAssignments collection.
     * @path /machineAssignments/{assignmentId}
     * @allow (get, list, create, update, delete) Any user can perform any operation.
     * @deny None.
     * @principle Open access for prototyping.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows all reads and writes to the usageLog collection.
     * @path /usageLog/{logId}
     * @allow (get, list, create, update, delete) Any user can perform any operation.
     * @deny None.
     * @principle Open access for prototyping.
     */
    match /usageLog/{logId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Allows all reads and writes to the users collection.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) Any user can perform any operation.
     * @deny None.
     * @principle Open access for prototyping.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }
      /**
       * @description Allows all reads and writes to the roles collection.
       * @path /roles/{userId}
       * @allow (get, list, create, update, delete) Any user can perform any operation.
       * @deny None.
       * @principle Open access for prototyping.
       */
    match /roles/{userId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }
  }
}