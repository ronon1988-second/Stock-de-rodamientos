/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, with specific rules for user profiles, roles, inventory, sectors, machines, machine assignments, and usage logs.
 *
 * Data Structure:
 * - /inventory/{itemId}: Global inventory of items.
 * - /sectors/{sectorId}: Sectors in the plant.
 * - /sectors/{sectorId}/machines/{machineId}: Machines within sectors.
 * - /machineAssignments/{assignmentId}: Assignments of inventory items to machines.
 * - /usageLog/{logId}: Historical usage logs.
 * - /users/{userId}: User profiles.
 * - /roles/{userId}: User roles (admin, editor).
 *
 * Key Security Decisions:
 * - User profiles and roles are strictly user-owned; users can only read/write their own data.
 * - Listing of user profiles and roles is disallowed.
 * - Inventory, sectors, machines, machine assignments, and usage logs are accessible to users with 'admin' or 'editor' roles.
 * - Schema validation is relaxed to allow for rapid prototyping. Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 * - User roles are stored in a separate collection (`/roles/{userId}`) to simplify role management.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return isSignedIn() && (request.auth.token.admin == true);
    }

     /**
      * @description Checks if the user is an editor.
      */
    function isEditor() {
      return isSignedIn() && (request.auth.token.editor == true);
    }

    /**
     * @description Checks if the user is an admin or editor.
     */
    function isAdminOrEditor() {
      return isAdmin() || isEditor();
    }


    /**
     * @description User profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile document with matching userId and uid.
     * @allow (get) User with UID 'user123' reads their own profile.
     * @allow (update) User with UID 'user123' updates their own profile.
     * @allow (delete) User with UID 'user123' deletes their own profile.
     * @deny (create) User with UID 'user123' tries to create a profile for userId 'otherUser'.
     * @deny (get) User with UID 'user123' tries to read profile for userId 'otherUser'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isOwner(userId);
    }

    /**
     * @description User roles (admin, editor).
     * @path /roles/{userId}
     * @allow (create) User with UID 'user123' creates their own role document with matching userId.
     * @allow (get) User with UID 'user123' reads their own role.
     * @allow (update) User with UID 'user123' updates their own role.
     * @allow (delete) User with UID 'user123' deletes their own role.
     * @deny (create) User with UID 'user123' tries to create a role for userId 'otherUser'.
     * @deny (get) User with UID 'user123' tries to read role for userId 'otherUser'.
     * @principle Enforces document ownership for user roles.
     */
    match /roles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Global inventory of all available items.
     * @path /inventory/{itemId}
     * @allow (get) Any signed-in user can read inventory items.
     * @allow (list) Any signed-in user can list inventory items.
     * @allow (create) Only admins or editors can create inventory items.
     * @allow (update) Only admins or editors can update inventory items.
     * @allow (delete) Only admins or editors can delete inventory items.
     * @principle Enforces admin/editor role for inventory management.
     */
    match /inventory/{itemId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdminOrEditor();
      allow update: if isAdminOrEditor();
      allow delete: if isAdminOrEditor();
    }

    /**
     * @description Top-level organizational units of the plant.
     * @path /sectors/{sectorId}
     * @allow (get) Any signed-in user can read sectors.
     * @allow (list) Any signed-in user can list sectors.
     * @allow (create) Only admins or editors can create sectors.
     * @allow (update) Only admins or editors can update sectors.
     * @allow (delete) Only admins or editors can delete sectors.
     * @principle Enforces admin/editor role for sector management.
     */
    match /sectors/{sectorId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdminOrEditor();
      allow update: if isAdminOrEditor();
      allow delete: if isAdminOrEditor();
    }

    /**
     * @description Machines belonging to a specific sector.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get) Any signed-in user can read machines.
     * @allow (list) Any signed-in user can list machines.
     * @allow (create) Only admins or editors can create machines.
     * @allow (update) Only admins or editors can update machines.
     * @allow (delete) Only admins or editors can delete machines.
     * @principle Enforces admin/editor role for machine management.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdminOrEditor();
      allow update: if isAdminOrEditor();
      allow delete: if isAdminOrEditor();
    }

    /**
     * @description Associates inventory items with specific machines.
     * @path /machineAssignments/{assignmentId}
     * @allow (get) Any signed-in user can read machine assignments.
     * @allow (list) Any signed-in user can list machine assignments.
     * @allow (create) Only admins or editors can create machine assignments.
     * @allow (update) Only admins or editors can update machine assignments.
     * @allow (delete) Only admins or editors can delete machine assignments.
     * @principle Enforces admin/editor role for machine assignment management.
     */
    match /machineAssignments/{assignmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdminOrEditor();
      allow update: if isAdminOrEditor();
      allow delete: if isAdminOrEditor();
    }

    /**
     * @description Historical log of all item usage.
     * @path /usageLog/{logId}
     * @allow (get) Any signed-in user can read usage logs.
     * @allow (list) Any signed-in user can list usage logs.
     * @allow (create) Only admins or editors can create usage logs.
     * @allow (update) Only admins or editors can update usage logs.
     * @allow (delete) Only admins or editors can delete usage logs.
     * @principle Enforces admin/editor role for usage log management.
     */
    match /usageLog/{logId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdminOrEditor();
      allow update: if isAdminOrEditor();
      allow delete: if isAdminOrEditor();
    }
  }
}