/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy: This ruleset prioritizes secure authorization while allowing
 * flexible data shapes during the prototyping phase. It focuses on who can
 * access what, rather than strictly enforcing data schemas.
 *
 * Data Structure: The Firestore database contains collections for users, sectors,
 * machines, inventory items, and machine assignments. User-specific data is stored
 * under `/users/{userId}`. Other data is stored in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the 'sectors', 'machines', 'inventoryItems',
 *   and 'machineAssignments' collections.
 * - Write access to 'sectors', 'machines', 'inventoryItems',
 *   and 'machineAssignments' collections is restricted to authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and it exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the UserProfile collection.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can get their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile for user 'user123'.
     * @principle Enforces document ownership for writes; allows owner to read.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the Sectors collection.
     * @path /sectors/{sectorId}
     * @allow (get) Any user can read sector data.
     * @allow (list) Any user can list sector data.
     * @allow (create) Authenticated user can create a sector.
     * @deny (create) Unauthenticated user cannot create a sector.
     * @deny (update) Unauthenticated user cannot update sector data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /sectors/{sectorId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for the Machines collection.
     * @path /machines/{machineId}
     * @allow (get) Any user can read machine data.
     * @allow (list) Any user can list machine data.
     * @allow (create) Authenticated user can create a machine.
     * @deny (create) Unauthenticated user cannot create a machine.
     * @deny (update) Unauthenticated user cannot update machine data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /machines/{machineId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for the InventoryItems collection.
     * @path /inventoryItems/{inventoryItemId}
     * @allow (get) Any user can read inventory item data.
     * @allow (list) Any user can list inventory item data.
     * @allow (create) Authenticated user can create an inventory item.
     * @deny (create) Unauthenticated user cannot create an inventory item.
     * @deny (update) Unauthenticated user cannot update inventory item data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /inventoryItems/{inventoryItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for the MachineAssignments collection.
     * @path /machineAssignments/{machineAssignmentId}
     * @allow (get) Any user can read machine assignment data.
     * @allow (list) Any user can list machine assignment data.
     * @allow (create) Authenticated user can create a machine assignment.
     * @deny (create) Unauthenticated user cannot create a machine assignment.
     * @deny (update) Unauthenticated user cannot update machine assignment data.
     * @principle Public read access with authenticated-user-only writes.
     */
    match /machineAssignments/{machineAssignmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}