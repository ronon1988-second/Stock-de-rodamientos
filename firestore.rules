/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control, with 'admin' and 'editor' roles having elevated privileges.
 * Data Structure:
 * - /roles/{userId}: Stores user roles (admin, editor).
 * - /users/{userId}: Stores user profile data; only accessible to admins.
 * - /sectors/{sectorId}: Stores sector data; readable by all authenticated users, writable by admins/editors.
 * - /articles/{articleId}: Stores article data; readable by all authenticated users, writable by admins/editors.
 * Key Security Decisions:
 * - Roles are stored in the /roles/{userId} collection.
 * - User profiles (/users/{userId}) are only readable by admins.
 * - Sectors and articles are readable by any authenticated user, but only admins/editors can write.
 * Denormalization for Authorization: The rules rely on the `request.auth.token.role` claim to check user roles, avoiding the need for extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read their own role.
     * @path /roles/{userId}
     * @allow (get) User with UID "user123" reading /roles/user123.
     * @deny (get) User with UID "user123" reading /roles/user456.
     * @principle Enforces user-ownership for reading role.
     */
    match /roles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Only admins can read user profiles.
     * @path /users/{userId}
     * @allow (get) Admin user reading any /users/{userId} document.
     * @deny (get) Non-admin user reading any /users/{userId} document.
     * @principle Restricts user profile access to admins only.
     */
    match /users/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows authenticated users to read sectors, and admins/editors to write.
     * @path /sectors/{sectorId}
     * @allow (get) Authenticated user reading any /sectors/{sectorId} document.
     * @allow (create) Admin/Editor creating a new /sectors/{sectorId} document.
     * @deny (get) Unauthenticated user reading any /sectors/{sectorId} document.
     * @deny (create) Non-admin/editor user creating a new /sectors/{sectorId} document.
     * @principle Enforces role-based access for sector management.
     */
    match /sectors/{sectorId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin() || isEditor();
      allow update: if isExistingAdmin() || isExistingEditor();
      allow delete: if isExistingAdmin() || isExistingEditor();
    }

    /**
     * @description Allows authenticated users to read articles, and admins/editors to write.
     * @path /articles/{articleId}
     * @allow (get) Authenticated user reading any /articles/{articleId} document.
     * @allow (create) Admin/Editor creating a new /articles/{articleId} document.
     * @deny (get) Unauthenticated user reading any /articles/{articleId} document.
     * @deny (create) Non-admin/editor user creating a new /articles/{articleId} document.
     * @principle Enforces role-based access for article management.
     */
    match /articles/{articleId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin() || isEditor();
      allow update: if isExistingAdmin() || isExistingEditor();
      allow delete: if isExistingAdmin() || isExistingEditor();
    }

    /**
     * @description Allows read and write for inventory items.
     * @path /inventory/{itemId}
     * @allow (get) Admin user reading any /inventory/{itemId} document.
     * @allow (create) Admin creating a new /inventory/{itemId} document.
     * @deny (get) Non-admin user reading any /inventory/{itemId} document.
     * @deny (create) Non-admin user creating a new /inventory/{itemId} document.
     * @principle Enforces role-based access for inventory item management.
     */
     match /inventory/{itemId} {
        allow get: if isAdmin() || isEditor();
        allow list: if isAdmin() || isEditor();
        allow create: if isAdmin() || isEditor();
        allow update: if isExistingAdmin() || isExistingEditor();
        allow delete: if isExistingAdmin() || isExistingEditor();
     }

      /**
       * @description Allows read and write for machine assignments.
       * @path /machineAssignments/{assignmentId}
       * @allow (get) Admin user reading any /machineAssignments/{assignmentId} document.
       * @allow (create) Admin creating a new /machineAssignments/{assignmentId} document.
       * @deny (get) Non-admin user reading any /machineAssignments/{assignmentId} document.
       * @deny (create) Non-admin user creating a new /machineAssignments/{assignmentId} document.
       * @principle Enforces role-based access for machine assignment management.
       */
     match /machineAssignments/{assignmentId} {
        allow get: if isAdmin() || isEditor();
        allow list: if isAdmin() || isEditor();
        allow create: if isAdmin() || isEditor();
        allow update: if isExistingAdmin() || isExistingEditor();
        allow delete: if isExistingAdmin() || isExistingEditor();
     }

      /**
       * @description Allows read and write for usage logs.
       * @path /usageLog/{logId}
       * @allow (get) Admin user reading any /usageLog/{logId} document.
       * @allow (create) Admin creating a new /usageLog/{logId} document.
       * @deny (get) Non-admin user reading any /usageLog/{logId} document.
       * @deny (create) Non-admin user creating a new /usageLog/{logId} document.
       * @principle Enforces role-based access for usage log management.
       */
       match /usageLog/{logId} {
          allow get: if isAdmin() || isEditor();
          allow list: if isAdmin() || isEditor();
          allow create: if isAdmin() || isEditor();
          allow update: if isExistingAdmin() || isExistingEditor();
          allow delete: if isExistingAdmin() || isExistingEditor();
       }

       /**
        * @description Allows read and write for machines within a sector.
        * @path /sectors/{sectorId}/machines/{machineId}
        */
       match /sectors/{sectorId}/machines/{machineId} {
            allow get: if isAdmin() || isEditor();
            allow list: if isAdmin() || isEditor();
            allow create: if isAdmin() || isEditor();
            allow update: if isExistingAdmin() || isExistingEditor();
            allow delete: if isExistingAdmin() || isExistingEditor();
       }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return isSignedIn() && request.auth.token.role == "admin";
  }

  function isEditor() {
    return isSignedIn() && request.auth.token.role == "editor";
  }

    function isExistingAdmin() {
        return isAdmin() && resource != null;
    }

    function isExistingEditor() {
        return isEditor() && resource != null;
    }
}