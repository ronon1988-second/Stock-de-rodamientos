/**
 * @fileoverview Firestore Security Rules for Inventory Management Application.
 *
 * Core Philosophy:
 * This ruleset employs a role-based access control model. Administrative users have broad access to manage
 * user roles and system configuration. Editor users can manage inventory and track usage. All authenticated
 * users have read-only access to the data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /roles/{userId}: Stores user roles (admin, editor), accessible only to admins for management.
 * - /sectors/{sectorId}: Stores sector information, publicly readable, managed by admins.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine information, publicly readable, managed by admins.
 * - /inventory/{inventoryId}: Stores inventory item information, publicly readable, managed by editors and admins.
 * - /machineAssignments/{assignmentId}: Stores machine assignment information, publicly readable, managed by editors and admins.
 * - /usageLog/{usageLogId}: Stores usage log data, publicly readable, creatable by editors and admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read-only access is granted to all authenticated users for core data collections (sectors, machines, inventory, assignments, logs).
 * - The application uses a global role-based system instead of resource-specific roles.
 *
 * Denormalization for Authorization:
 *  - To simplify the rules and avoid complex queries, the role of a user is checked directly via the /roles/{userId} document.
 *
 * Structural Segregation:
 *  - Public and private data are stored in separate collections to simplify read access. User profiles are stored under /users/{userId}
 *    and are private to the user. Sectors, machines, inventory, and logs are stored in top-level collections with public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profile data.
     * @path /users/{userId}
     * @allow (create, update, delete): Authenticated user can manage their own profile.
     * @allow (get): Authenticated user can read their own profile.
     * @deny (get): Any other user tries to read this user's profile.
     * @deny (create, update, delete): Any other user tries to modify this user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to user roles.
     * @path /roles/{userId}
     * @allow (get, list): Denied. Listing or getting roles is not permitted except for admin.
     * @allow (create, update, delete): Only admins can manage user roles.
     * @deny (create, update, delete): Non-admins cannot manage user roles.
     * @principle Restricts role management to administrative users.
     */
    match /roles/{userId} {
      allow get: if isAdmin();
      allow list: if false; // Listing roles is not permitted.
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Secure access to sectors.
     * @path /sectors/{sectorId}
     * @allow (get, list): All authenticated users can read sector information.
     * @allow (create, update, delete): Only admins can manage sectors.
     * @deny (create, update, delete): Non-admins cannot manage sectors.
     * @principle Grants public read access with owner-only (admin) writes for sectors.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Secure access to machines within sectors.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list): All authenticated users can read machine information.
     * @allow (create, update, delete): Only admins can manage machines.
     * @deny (create, update, delete): Non-admins cannot manage machines.
     * @principle Grants public read access with owner-only (admin) writes for machines.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Secure access to inventory items.
     * @path /inventory/{inventoryId}
     * @allow (get, list): All authenticated users can read inventory items.
     * @allow (create, update, delete): Only editors and admins can manage inventory items.
     * @deny (create, update, delete): Non-editors/admins cannot manage inventory items.
     * @principle Grants public read access with owner-only (editor/admin) writes for inventory.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin() || isEditor();
      allow update: if (isAdmin() || isEditor()) && resource != null;
      allow delete: if (isAdmin() || isEditor()) && resource != null;
    }

    /**
     * @description Secure access to machine assignments.
     * @path /machineAssignments/{assignmentId}
     * @allow (get, list): All authenticated users can read machine assignments.
     * @allow (create, update, delete): Only editors and admins can manage machine assignments.
     * @deny (create, update, delete): Non-editors/admins cannot manage machine assignments.
     * @principle Grants public read access with owner-only (editor/admin) writes for machine assignments.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin() || isEditor();
      allow update: if (isAdmin() || isEditor()) && resource != null;
      allow delete: if (isAdmin() || isEditor()) && resource != null;
    }

    /**
     * @description Secure access to usage logs.
     * @path /usageLog/{usageLogId}
     * @allow (get, list): All authenticated users can read usage logs.
     * @allow (create): Only editors and admins can create usage logs.
     * @allow (update, delete): Editors and admins cannot update or delete usage logs.
     * @deny (create): Non-editors/admins cannot create usage logs.
     * @deny (update, delete): Non-editors/admins cannot update or delete usage logs.
     * @principle Grants public read access with create-only (editor/admin) writes for usage logs.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin() || isEditor();
      allow update, delete: if false;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param userId The user ID to compare against the request's auth UID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param userId The user ID to compare against the resource's UID.
     * @return True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user has the 'editor' role.
     * @return True if the user has the 'editor' role, false otherwise.
     */
    function isEditor() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'editor';
    }
  }
}