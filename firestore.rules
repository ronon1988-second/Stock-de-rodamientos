/**
 * @fileoverview Firestore Security Rules for the Plant Management Application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control model. Users are assigned roles ('admin', 'editor') that dictate their permissions.
 * All authenticated users can read all data, but write access is restricted based on role.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information (role, etc.).
 * - /sectors/{sectorId}: Stores sector information.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine information within a sector.
 * - /inventory/{inventoryId}: Stores inventory item information.
 * - /machineAssignments/{assignmentId}: Stores machine assignment information.
 * - /usageLog/{usageLogId}: Stores item usage logs.
 *
 * Key Security Decisions:
 * - All authenticated users can read any data in the database.
 * - Admins can manage users, sectors, and machines.
 * - Editors can manage inventory and usage logs.
 * - Listing the /users collection is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * User roles are stored directly in the /users/{userId} document for efficient authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user is an editor.
     */
    function isEditor() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'editor';
    }

    /**
     * @description Checks if the user is an existing owner (signed in, isOwner, and resource exists).
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read their own profile document at /users/user123.
     * @allow (update) - User with UID 'user123' can update their own profile document at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their own profile document at /users/user123.
     * @deny (create) - User with UID 'user123' cannot create a profile document at /users/user456 (mismatched UID).
     * @deny (list) - Any user cannot list the /users collection.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      // A user can only create their own profile.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow get: if isSignedIn();
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
      allow list: if false; // Listing users is disallowed for privacy.
    }

    /**
     * @description Rules for the /sectors collection.
     * @path /sectors/{sectorId}
     * @allow (get) - Any signed-in user can read sector data.
     * @allow (create) - Only admins can create sectors.
     * @allow (update) - Only admins can update sectors.
     * @allow (delete) - Only admins can delete sectors.
     * @deny (create) - Non-admin users cannot create sectors.
     * @principle Restricts write access to admins only.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /sectors/{sectorId}/machines collection.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get) - Any signed-in user can read machine data.
     * @allow (create) - Only admins can create machines.
     * @allow (update) - Only admins can update machines.
     * @allow (delete) - Only admins can delete machines.
     * @deny (create) - Non-admin users cannot create machines.
     * @principle Restricts write access to admins only.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /inventory collection.
     * @path /inventory/{inventoryId}
     * @allow (get) - Any signed-in user can read inventory data.
     * @allow (create) - Only editors and admins can create inventory items.
     * @allow (update) - Only editors and admins can update inventory items.
     * @allow (delete) - Only editors and admins can delete inventory items.
     * @deny (create) - Non-editor/admin users cannot create inventory items.
     * @principle Restricts write access to editors and admins only.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
      allow delete: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
    }

    /**
     * @description Rules for the /machineAssignments collection.
     * @path /machineAssignments/{assignmentId}
     * @allow (get) - Any signed-in user can read machine assignment data.
     * @allow (create) - Only editors and admins can create machine assignments.
     * @allow (update) - Only editors and admins can update machine assignments.
     * @allow (delete) - Only editors and admins can delete machine assignments.
     * @deny (create) - Non-editor/admin users cannot create machine assignments.
     * @principle Restricts write access to editors and admins only.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
      allow delete: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
    }

    /**
     * @description Rules for the /usageLog collection.
     * @path /usageLog/{usageLogId}
     * @allow (get) - Any signed-in user can read usage log data.
     * @allow (create) - Only editors and admins can create usage logs.
     * @deny (create) - Non-editor/admin users cannot create usage logs.
     * @principle Restricts write access to editors and admins only.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if false; // Usage logs should not be updated.
      allow delete: if false; // Usage logs should not be deleted.
    }
  }
}