rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User 'test_user' with UID 'test_user' can create their own profile.
     * @allow (get) User 'test_user' with UID 'test_user' can read their own profile.
     * @allow (update) User 'test_user' with UID 'test_user' can update their own profile.
     * @allow (delete) User 'test_user' with UID 'test_user' can delete their own profile.
     * @deny (create) User 'other_user' with UID 'other_user' cannot create a profile for user 'test_user'.
     * @deny (update) User 'other_user' with UID 'other_user' cannot update the profile for user 'test_user'.
     * @deny (delete) User 'other_user' cannot delete the profile for user 'test_user'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to user roles.
     * @path /roles/{userId}
     * @allow (create) User 'test_user' with UID 'test_user' can create their own role.
     * @allow (get) User 'test_user' with UID 'test_user' can read their own role.
     * @allow (update) User 'test_user' with UID 'test_user' can update their own role.
     * @allow (delete) User 'test_user' with UID 'test_user' can delete their own role.
     * @deny (create) User 'other_user' with UID 'other_user' cannot create a role for user 'test_user'.
     * @deny (update) User 'other_user' with UID 'other_user' cannot update the role for user 'test_user'.
     * @deny (delete) User 'other_user' cannot delete the role for user 'test_user'.
     * @principle Enforces document ownership for all operations on user roles.
     */
    match /roles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to sector information.
     * @path /sectors/{sectorId}
     * @allow (get) Any user can read sector information.
     * @allow (list) Any user can list sectors.
     * @allow (create) Only admins can create sectors.
     * @allow (update) Only admins can update sectors.
     * @allow (delete) Only admins can delete sectors.
     * @deny (create) Non-admin users cannot create sectors.
     * @deny (update) Non-admin users cannot update sectors.
     * @deny (delete) Non-admin users cannot delete sectors.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /sectors/{sectorId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to machine information within a sector.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get) Any user can read machine information.
     * @allow (list) Any user can list machines within a sector.
     * @allow (create) Only admins can create machines.
     * @allow (update) Only admins can update machines.
     * @allow (delete) Only admins can delete machines.
     * @deny (create) Non-admin users cannot create machines.
     * @deny (update) Non-admin users cannot update machines.
     * @deny (delete) Non-admin users cannot delete machines.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to inventory items.
     * @path /inventory/{inventoryId}
     * @allow (get) Any user can read inventory items.
     * @allow (list) Any user can list inventory items.
     * @allow (create) Only editors and admins can create inventory items.
     * @allow (update) Only editors and admins can update inventory items.
     * @allow (delete) Only editors and admins can delete inventory items.
     * @deny (create) Non-editor and non-admin users cannot create inventory items.
     * @deny (update) Non-editor and non-admin users cannot update inventory items.
     * @deny (delete) Non-editor and non-admin users cannot delete inventory items.
     * @principle Allows public read access, restricts writes to editors and admins.
     */
    match /inventory/{inventoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if isSignedIn() && (isAdmin() || isEditor());
      allow delete: if isSignedIn() && (isAdmin() || isEditor());
    }

    /**
     * @description Controls access to machine assignments.
     * @path /machineAssignments/{assignmentId}
     * @allow (get) Any user can read machine assignments.
     * @allow (list) Any user can list machine assignments.
     * @allow (create) Only editors and admins can create machine assignments.
     * @allow (update) Only editors and admins can update machine assignments.
     * @allow (delete) Only editors and admins can delete machine assignments.
     * @deny (create) Non-editor and non-admin users cannot create machine assignments.
     * @deny (update) Non-editor and non-admin users cannot update machine assignments.
     * @deny (delete) Non-editor and non-admin users cannot delete machine assignments.
     * @principle Allows public read access, restricts writes to editors and admins.
     */
    match /machineAssignments/{assignmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if isSignedIn() && (isAdmin() || isEditor());
      allow delete: if isSignedIn() && (isAdmin() || isEditor());
    }

    /**
     * @description Controls access to usage logs.
     * @path /usageLog/{usageLogId}
     * @allow (get) Any user can read usage logs.
     * @allow (list) Any user can list usage logs.
     * @allow (create) Only editors and admins can create usage logs.
     * @allow (update) Usage logs cannot be updated.
     * @allow (delete) Usage logs cannot be deleted.
     * @deny (create) Non-editor and non-admin users cannot create usage logs.
     * @deny (update) Usage logs cannot be updated.
     * @deny (delete) Usage logs cannot be deleted.
     * @principle Allows public read access, restricts creation to editors and admins, and prevents updates/deletes.
     */
    match /usageLog/{usageLogId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'admin';
  }

  function isEditor() {
    return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'editor';
  }
}