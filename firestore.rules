/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by default, enforcing strict access control based on
 * user roles (admin, editor) and resource ownership. Data shape validation is relaxed to
 * allow for rapid prototyping.
 *
 * Data Structure:
 * - /inventory/{itemId}: Global inventory of items.
 * - /sectors/{sectorId}: Sectors in the plant.
 * - /sectors/{sectorId}/machines/{machineId}: Machines within sectors.
 * - /machineAssignments/{assignmentId}: Assignments of items to machines.
 * - /usageLog/{logId}: Historical item usage logs.
 * - /users/{userId}: User profile information.
 * - /roles/{userId}: User roles (admin, editor).
 *
 * Key Security Decisions:
 * - Only authenticated users can access any data.
 * - User listing is explicitly denied for privacy.
 * - Roles determine elevated access (admin, editor).
 * - Missing ownership fields will block write access and create a TODO item to flag.
 *
 * Denormalization for Authorization:
 *  None specified in data model.
 * Structural Segregation:
 * Not applicable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource, and that the resource exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user has the 'editor' role.
     * @return {boolean} True if the user has the 'editor' role, false otherwise.
     */
    function isEditor() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'editor';
    }

    /**
     * @description Rules for the /inventory/{itemId} collection.
     * @path /inventory/{itemId}
     * @allow (get, list) if true
     * @allow (create) if isAdmin()
     * @allow (update) if isAdmin()
     * @allow (delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Allows anyone to read inventory, but only admins can create, update, or delete.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /sectors/{sectorId} collection.
     * @path /sectors/{sectorId}
     * @allow (get, list) if true
     * @allow (create) if isAdmin()
     * @allow (update) if isAdmin()
     * @allow (delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Allows anyone to read sector information, but only admins can modify it.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /sectors/{sectorId}/machines/{machineId} collection.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) if true
     * @allow (create) if isAdmin()
     * @allow (update) if isAdmin()
     * @allow (delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Allows anyone to read machine information, but only admins can modify it.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /machineAssignments/{assignmentId} collection.
     * @path /machineAssignments/{assignmentId}
     * @allow (get, list) if true
     * @allow (create) if isAdmin()
     * @allow (update) if isAdmin()
     * @allow (delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Allows anyone to read machine assignment information, but only admins can modify it.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /usageLog/{logId} collection.
     * @path /usageLog/{logId}
     * @allow (get, list) if true
     * @allow (create) if isAdmin()
     * @allow (update) if isAdmin()
     * @allow (delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Allows anyone to read usage log information, but only admins can modify it.
     */
    match /usageLog/{logId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) if isOwner(userId)
     * @allow (list) if false
     * @allow (create) if isOwner(userId)
     * @allow (update) if isExistingOwner(userId)
     * @allow (delete) if isExistingOwner(userId)
     * @deny (get) if !isOwner(userId)
     * @deny (create) if !isOwner(userId)
     * @deny (update) if !isExistingOwner(userId)
     * @deny (delete) if !isExistingOwner(userId)
     * @principle Enforces user-ownership for profile management.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create, update, delete: if isOwner(userId) && (request.auth.uid == userId);
    }

    /**
     * @description Rules for the /roles/{userId} collection.
     * @path /roles/{userId}
     * @allow (get) if isAdmin()
     * @allow (list) if isAdmin()
     * @allow (create) if isAdmin()
     * @allow (update) if isAdmin()
     * @allow (delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @deny (update) if !isAdmin()
     * @deny (delete) if !isAdmin()
     * @principle Only admins can manage user roles.
     */
    match /roles/{userId} {
      allow get, list, create, update, delete: if isAdmin();
    }
  }
}