/**
 * @fileoverview Firestore Security Rules for the Inventory Management Application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control (RBAC) model with 'admin' and 'editor' roles.
 * All authenticated users can read data, but write access is restricted based on the assigned role.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information, accessible only to the owner.
 * - /roles/{userId}: Stores user roles ('admin', 'editor'), accessible only to admins and the user themselves.
 * - /sectors/{sectorId}: Stores sector information, publicly readable, writable by admins.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine information, publicly readable, writable by admins.
 * - /inventory/{inventoryId}: Stores inventory items, publicly readable, writable by editors and admins.
 * - /machineAssignments/{assignmentId}: Stores machine assignments, publicly readable, writable by editors and admins.
 * - /usageLog/{usageLogId}: Stores usage logs, publicly readable, creatable by editors and admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Read-only access is granted to all authenticated users for sectors, machines, inventory, machine assignments, and usage logs.
 * - Data validation is relaxed for prototyping, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 *  - To create simpler, more performant rules, always denormalize (copy) data required for an authorization decision directly onto the documents being secured. This avoids slow, costly, or impossible security checks.
 *  - Example: Roles are stored in the `roles` collection to simplify role checks in the rules.
 *
 * Structural Segregation:
 *  - When data can be both private and public (e.g., drafts vs. published content), prefer using separate collections (a private user subcollection and a public top-level collection). This pattern is more secure and performant for list operations than using a single collection with a boolean flag.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'admin';
    }

    function isEditor() {
      return isSignedIn() && (get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'editor' || isAdmin());
    }

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Only the user themselves.
     * @deny (list) - User listing is not permitted.
     * @deny (create) - Cannot create another user profile
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user role documents.
     * @path /roles/{userId}
     * @allow (get) - Only the user themselves or an admin can read role.
     * @allow (create, update) - Only an admin can create roles.
     * @deny (list, delete) - Role listing/deletion not permitted.
     * @principle Role-based access control for user roles.
     */
    match /roles/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Controls access to sector documents.
     * @path /sectors/{sectorId}
     * @allow (get, list) - All authenticated users can read.
     * @allow (create, update, delete) - Only admins can write.
     * @principle Read-only for all, writeable by admins.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to machine documents within a sector.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) - All authenticated users can read.
     * @allow (create, update, delete) - Only admins can write.
     * @principle Read-only for all, writeable by admins.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to inventory item documents.
     * @path /inventory/{inventoryId}
     * @allow (get, list) - All authenticated users can read.
     * @allow (create, update, delete) - Only editors and admins can write.
     * @principle Read-only for all, writeable by editors and admins.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor();
      allow update: if isEditor();
      allow delete: if isEditor();
    }

    /**
     * @description Controls access to machine assignment documents.
     * @path /machineAssignments/{assignmentId}
     * @allow (get, list) - All authenticated users can read.
     * @allow (create, update, delete) - Only editors and admins can write.
     * @principle Read-only for all, writeable by editors and admins.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor();
      allow update: if isEditor();
      allow delete: if isEditor();
    }

    /**
     * @description Controls access to usage log documents.
     * @path /usageLog/{usageLogId}
     * @allow (get, list) - All authenticated users can read.
     * @allow (create) - Only editors and admins can create.
     * @deny (update, delete) - Usage logs cannot be modified or deleted after creation.
     * @principle Read-only for all, createable by editors and admins.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor();
      allow update: if false;
      allow delete: if false;
    }
  }
}