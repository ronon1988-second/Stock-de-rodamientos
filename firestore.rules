/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing a strict ownership model for user-specific data
 * while allowing public read access to certain collections.  It leverages denormalization to make
 * authorization checks efficient and avoids costly `get()` calls.  Data shape validation is relaxed
 * to allow for rapid prototyping and iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /sectors/{sectorId}: Stores sector information, publicly readable, but writable only by admins.
 * - /machines/{machineId}: Stores machine information, publicly readable, but writable only by admins. Requires `sectorId`.
 * - /inventory/{itemId}: Stores inventory item information, publicly readable, but writable only by admins.
 * - /machineAssignments/{machineAssignmentId}: Stores machine assignment information.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for privacy.
 * - Public read access is granted to sectors, machines, and inventory to facilitate data discovery.
 * - The default security posture is strict; any ambiguous relationships or missing ownership checks are denied.
 *
 * Denormalization for Authorization:
 * - The `machines` collection includes a `sectorId` field to avoid needing to query the `sectors` collection for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user ID matches the request's authentication UID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against the resource's data.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the specified role
     * @param {string} role The role to check for (e.g., 'admin', 'editor').
     * @return {boolean} True if the user has the role, false otherwise.
     */
    function hasRole(role) {
        return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == role;
    }
    
    match /users/{userId} {
      /**
       * @description Manages user profiles, ensuring only the authenticated user can access their own profile.
       * @path /users/{userId}
       * @allow (create) - An authenticated user can create their profile if the userId matches their auth.uid.
       * @allow (get, update, delete) - An authenticated user can only access their own profile.
       * @deny (create) - If the userId does not match the authenticated user's uid.
       * @deny (get, update, delete) - If the user is not authenticated, or attempts to access a different user's profile.
       * @principle Enforces document ownership and prevents unauthorized access to user profiles.
       */
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    match /sectors/{sectorId} {
      /**
       * @description Manages sectors, allowing public reads and admin-only writes.
       * @path /sectors/{sectorId}
       * @allow (get, list) - Any user can read the sector data.
       * @allow (create, update, delete) - Only users with the 'admin' role can modify sector data.
       * @deny (create, update, delete) - If the user is not an admin.
       * @principle Public read access with role-based write restrictions.
       */
      allow get, list: if true;
      allow create: if hasRole('admin');
      allow update: if hasRole('admin') && resource != null;
      allow delete: if hasRole('admin') && resource != null;
    }

    match /machines/{machineId} {
      /**
       * @description Manages machines, allowing public reads and admin-only writes.
       * @path /machines/{machineId}
       * @allow (get, list) - Any user can read the machine data.
       * @allow (create, update, delete) - Only users with the 'admin' role can modify machine data.
       * @deny (create, update, delete) - If the user is not an admin.
       * @principle Public read access with role-based write restrictions.
       */
      allow get, list: if true;
      allow create: if hasRole('admin');
      allow update: if hasRole('admin') && resource != null;
      allow delete: if hasRole('admin') && resource != null;
    }

    match /inventory/{itemId} {
      /**
       * @description Manages inventory items, allowing public reads and admin-only writes.
       * @path /inventory/{itemId}
       * @allow (get, list) - Any user can read the inventory item data.
       * @allow (create, update, delete) - Only users with the 'admin' role can modify inventory item data.
       * @deny (create, update, delete) - If the user is not an admin.
       * @principle Public read access with role-based write restrictions.
       */
      allow get, list: if true;
      allow create: if hasRole('admin');
      allow update: if hasRole('admin') && resource != null;
      allow delete: if hasRole('admin') && resource != null;
    }

    match /machineAssignments/{machineAssignmentId} {
        /**
         * @description Manages machine assignments, allowing admin-only access.
         * @path /machineAssignments/{machineAssignmentId}
         * @allow (create, update, delete) - Only users with the 'admin' role can modify machine assignment data.
         * @allow (get, list) - Only users with the 'admin' role can read machine assignment data.
         * @deny (create, update, delete, get, list) - If the user is not an admin.
         * @principle Role-based access restrictions.
         */
        allow get, list: if hasRole('admin');
        allow create: if hasRole('admin');
        allow update: if hasRole('admin') && resource != null;
        allow delete: if hasRole('admin') && resource != null;
    }
        match /roles/{userId} {
      /**
       * @description Manages user roles, ensuring only the authenticated user can access their own role.
       * @path /roles/{userId}
       * @allow (create) - An authenticated user can create their role if the userId matches their auth.uid.
       * @allow (get, update, delete) - An authenticated user can only access their own role.
       * @deny (create) - If the userId does not match the authenticated user's uid.
       * @deny (get, update, delete) - If the user is not authenticated, or attempts to access a different user's role.
       * @principle Enforces document ownership and prevents unauthorized access to user profiles.
       */
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}