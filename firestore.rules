/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where users can only
 * read their own role, admins can read user profiles, and admins/editors can
 * manage articles. It prioritizes secure authorization based on user roles
 * and identities.
 *
 * Data Structure:
 * - /roles/{userId}: Stores user roles, readable only by the user themselves.
 * - /users/{userId}: Stores user profiles, readable only by admins.
 * - /articles/{articleId}: Stores article content, readable by all authenticated users,
 *   writable by admins and editors.
 * - /inventory/{itemId}: Stores inventory information.
 * - /sectors/{sectorId}: Stores sector information.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine information for each sector.
 * - /machineAssignments/{assignmentId}: Stores assignments of inventory items to machines.
 * - /usageLog/{logId}: Stores usage logs for inventory items.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized access to user data.
 * - Articles are publicly readable but only writable by authorized roles.
 * - The rules explicitly deny write access to roles and user profiles to
 *   prevent unauthorized role elevation or profile modification.
 * - Flexible schema on data writes for rapid prototyping.
 *
 * Denormalization for Authorization:
 *  - User roles are stored in a separate /roles/{userId} document. While this design requires a `get()` call in more complex scenarios, it aligns with the principle of separating authorization data. For the rules provided, this is the only means necessary.
 *
 * Structural Segregation:
 *  - User roles and profiles are stored in separate collections to simplify
 *    access control and prevent accidental exposure of sensitive information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read their own role.
     * @path /roles/{userId}
     * @allow (get, list) if the requesting user's UID matches the document ID.
     *          Example: User with UID 'user123' requests 'get' on /roles/user123.
     * @deny (get, list) if the requesting user's UID does not match the document ID.
     *          Example: User with UID 'user456' requests 'get' on /roles/user123.
     * @principle Enforces document ownership for reads.
     */
    match /roles/{userId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create, update, delete: if false;
    }

    /**
     * @description Allows admins to read user profiles.
     * @path /users/{userId}
     * @allow (get, list) if the requesting user has the 'admin' role.
     *          Example: User with 'admin' role requests 'get' on /users/user123.
     * @deny (get, list) if the requesting user does not have the 'admin' role.
     *          Example: User without 'admin' role requests 'get' on /users/user123.
     * @principle Restricts access to user profiles to admins only.
     */
    match /users/{userId} {
      allow get, list: if isSignedIn() && isAdmin();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to read articles and admins/editors to write them.
     * @path /articles/{articleId}
     * @allow (get, list) if the requesting user is authenticated.
     *          Example: Any authenticated user requests 'get' on /articles/article123.
     * @allow (create, update, delete) if the requesting user has the 'admin' or 'editor' role.
     *          Example: User with 'admin' role requests 'create' on /articles/article456.
     * @deny (create, update, delete) if the requesting user does not have the 'admin' or 'editor' role.
     *          Example: User without 'admin' or 'editor' role requests 'create' on /articles/article456.
     * @principle Provides public read access to articles while restricting write access to authorized roles.
     */
    match /articles/{articleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn() && (isAdmin() || isEditor());
    }

    /**
     * @description Allows anyone to read inventory items.
     * @path /inventory/{itemId}
     * @allow (get, list) if true (public read).
     *          Example: Any user requests 'get' on /inventory/item123.
     * @deny (create, update, delete) all write operations.
     * @principle Allows public read access to inventory items.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read sectors.
     * @path /sectors/{sectorId}
     * @allow (get, list) if true (public read).
     *          Example: Any user requests 'get' on /sectors/sector123.
     * @deny (create, update, delete) all write operations.
     * @principle Allows public read access to sectors.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read machines within a sector.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) if true (public read).
     *          Example: Any user requests 'get' on /sectors/sector123/machines/machine456.
     * @deny (create, update, delete) all write operations.
     * @principle Allows public read access to machines within sectors.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read machine assignments.
     * @path /machineAssignments/{assignmentId}
     * @allow (get, list) if true (public read).
     *          Example: Any user requests 'get' on /machineAssignments/assignment123.
     * @deny (create, update, delete) all write operations.
     * @principle Allows public read access to machine assignments.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows anyone to read usage logs.
      * @path /usageLog/{logId}
      * @allow (get, list) if true (public read).
      *          Example: Any user requests 'get' on /usageLog/log123.
      * @deny (create, update, delete) all write operations.
      * @principle Allows public read access to usage logs.
      */
    match /usageLog/{logId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return request.auth.token.role == 'admin';
  }

    function isEditor() {
    return request.auth.token.role == 'editor';
  }
}