/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset implements a role-based access control system with public read access to inventory data.
 *   Admin and editor roles have broad write access, while regular users can only read inventory data.
 *
 * @data_structure
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /roles/{userId}: Stores user roles, accessible only to admins.
 * - /sectors/{sectorId}: Stores sector data.
 * - /machines/{machineId}: Stores machine data.
 * - /inventory/{itemId}: Stores inventory item data.
 * - /machine_assignments/{assignmentId}: Stores machine assignment data.
 *
 * @key_security_decisions
 * - Public read access to the `/inventory` collection is enabled for prototyping, but write access is restricted to admins and editors.
 * - User listing is disabled for privacy.
 * - All write operations require authentication.
 *
 * @denormalization_for_authorization
 * - No denormalization is used in this initial prototype. All authorization is based on user roles.
 *
 * @structural_segregation
 * - User profiles and roles are stored in separate collections to manage access control effectively.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile data.
     * @path /users/{userId}
     * @allow (get, list) User with UID 'user123' can read their profile data.
     * @deny (get, list) User with UID 'user456' cannot read 'user123' profile data.
     * @principle Enforces document ownership for reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows admins to read and write user roles.
     * @path /roles/{userId}
     * @allow (get, list, create, update, delete) Admin user can manage user roles.
     * @deny (get, list, create, update, delete) Non-admin user cannot manage user roles.
     * @principle Restricts role management to admins.
     */
    match /roles/{userId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read inventory data, but only admins/editors can create, update, or delete.
     * @path /inventory/{itemId}
     * @allow (get, list) Any user can read inventory data.
     * @allow (create, update, delete) Admin user can manage inventory data.
     * @deny (create, update, delete) Non-admin user cannot manage inventory data.
     * @principle Provides public read access with owner-only writes (for admins/editors).
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create: if isAdmin() || isEditor();
      allow update: if isExistingAdmin() || isExistingEditor();
      allow delete: if isExistingAdmin() || isExistingEditor();
    }

    /**
     * @description Allows anyone to read sector data, but only admins/editors can create, update, or delete.
     * @path /sectors/{sectorId}
     * @allow (get, list) Any user can read sector data.
     * @allow (create, update, delete) Admin user can manage sector data.
     * @deny (create, update, delete) Non-admin user cannot manage sector data.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create: if isAdmin() || isEditor();
      allow update: if isExistingAdmin() || isExistingEditor();
      allow delete: if isExistingAdmin() || isExistingEditor();
    }

    /**
     * @description Allows anyone to read machine data, but only admins/editors can create, update, or delete.
     * @path /machines/{machineId}
     * @allow (get, list) Any user can read machine data.
     * @allow (create, update, delete) Admin user can manage machine data.
     * @deny (create, update, delete) Non-admin user cannot manage machine data.
     */
    match /machines/{machineId} {
      allow get, list: if true;
      allow create: if isAdmin() || isEditor();
      allow update: if isExistingAdmin() || isExistingEditor();
      allow delete: if isExistingAdmin() || isExistingEditor();
    }

    /**
     * @description Allows anyone to read machine assignment data, but only admins/editors can create, update, or delete.
     * @path /machine_assignments/{assignmentId}
     * @allow (get, list) Any user can read machine assignment data.
     * @allow (create, update, delete) Admin user can manage machine assignment data.
     * @deny (create, update, delete) Non-admin user cannot manage machine assignment data.
     */
    match /machine_assignments/{assignmentId} {
      allow get, list: if true;
      allow create: if isAdmin() || isEditor();
      allow update: if isExistingAdmin() || isExistingEditor();
      allow delete: if isExistingAdmin() || isExistingEditor();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'admin';
    }

    function isEditor() {
      return isSignedIn() && (get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'admin' || get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == 'editor');
    }

    function isExistingAdmin() {
        return isAdmin() && resource != null;
    }

    function isExistingEditor() {
        return isEditor() && resource != null;
    }
  }
}