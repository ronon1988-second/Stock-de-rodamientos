/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset is designed for the rapid prototyping phase of development. It prioritizes ease of access and
 * modification for developers while maintaining a baseline level of security. It assumes a shared inventory model where any authenticated user can view and modify the same dataset.
 *
 * Data Structure:
 * - /inventory/{inventoryId}: Stores inventory items. Accessible by any authenticated user.
 * - /sectorAssignments/{assignmentId}: Stores sector assignments. Accessible by any authenticated user.
 * - /usageLog/{usageLogId}: Stores usage logs. Accessible by any authenticated user.
 *
 * Key Security Decisions:
 * - All authenticated users can read and write all collections.
 * - The rules explicitly deny unauthenticated access.
 * - No data validation is enforced beyond requiring user authentication for all operations.
 *
 * Denormalization for Authorization: N/A (All authenticated users have access)
 * Structural Segregation: N/A (All data is shared)
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines whether a user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Rules for the 'inventory' collection. Allows any authenticated user to read and write inventory items.
     * @path /databases/{database}/documents/inventory/{inventoryId}
     * @allow (get, list) Any authenticated user can read.
     * @allow (create, update, delete) Any authenticated user can write.
     * @deny If the user is not authenticated.
     * @principle Allows full access to inventory for all authenticated users during prototyping.
     */
    match /inventory/{inventoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data != null;
      allow delete: if isSignedIn() && resource.data != null;
    }

    /**
     * @description Rules for the 'sectorAssignments' collection. Allows any authenticated user to read and write sector assignments.
     * @path /databases/{database}/documents/sectorAssignments/{assignmentId}
     * @allow (get, list) Any authenticated user can read.
     * @allow (create, update, delete) Any authenticated user can write.
     * @deny If the user is not authenticated.
     * @principle Allows full access to sector assignments for all authenticated users during prototyping.
     */
    match /sectorAssignments/{assignmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data != null;
      allow delete: if isSignedIn() && resource.data != null;
    }

    /**
     * @description Rules for the 'usageLog' collection. Allows any authenticated user to read and write usage logs.
     * @path /databases/{database}/documents/usageLog/{usageLogId}
     * @allow (get, list) Any authenticated user can read.
     * @allow (create, update, delete) Any authenticated user can write.
     * @deny If the user is not authenticated.
     * @principle Allows full access to usage logs for all authenticated users during prototyping.
     */
    match /usageLog/{usageLogId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data != null;
      allow delete: if isSignedIn() && resource.data != null;
    }
  }
}