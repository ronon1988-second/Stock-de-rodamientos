/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with `admin` privileges.
 * All data is stored in top-level collections.
 *
 * Key Security Decisions:
 * - Only authenticated users can access the data.
 * - The ruleset enforces role based access control for the inventory collection. Only `admin` roles can list items.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     */
    function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description User profiles are publicly readable, but only the owner can modify their own profile.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read any profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (create) Non-authenticated user attempts to create a profile.
     * @deny (update) User attempts to update another user's profile.
     * @deny (delete) User attempts to delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Sectors can be read by all authenticated users. Only admins can create, update, or delete sectors.
     * @path /sectors/{sectorId}
     */
    match /sectors/{sectorId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Machines can be read by all authenticated users. Only admins can create, update, or delete machines.
     * @path /machines/{machineId}
     */
    match /machines/{machineId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

     /**
      * @description Inventory items can be read by all authenticated users. Only admins can create, update, or delete items.
      * @path /inventory/{inventoryId}
      * @allow (get) Any authenticated user can read an inventory item.
      * @allow (list) Only users with the 'admin' role can list inventory items.
      * @allow (create) Only users with the 'admin' role can create inventory items.
      * @allow (update) Only users with the 'admin' role can update inventory items.
      * @allow (delete) Only users with the 'admin' role can delete inventory items.
      * @deny (list) Non-admin user attempts to list inventory items.
      * @principle Role-based access control for inventory management.
      */
    match /inventory/{inventoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Machine assignments can be read by all authenticated users. Only admins can create, update, or delete assignments.
     * @path /machineAssignments/{assignmentId}
     */
    match /machineAssignments/{assignmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}