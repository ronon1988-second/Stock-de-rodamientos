/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control, with 'admin' and 'editor' roles having broad write access,
 * and users being able to read their own roles.  Read access is generally open to authenticated users.
 *
 * Data Structure:
 * - /roles/{userId}: Stores user roles (admin, editor). Only readable by the user themselves.
 * - /users/{userId}: Stores user profiles. Only readable by admins.
 * - /articles/{articleId}: Stores articles. Readable by all authenticated users, writable by admins/editors.
 * - /sectors/{sectorId}: Stores sector information. Readable by all authenticated users, writable by admins/editors.
 * - /inventory/{itemId}: Stores inventory information. Readable by all authenticated users, writable by admins/editors.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed to protect user privacy.
 * - The rules explicitly deny any write operations that are not explicitly allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read their own role.
     * @path /roles/{userId}
     * @allow (read) User with UID 'user123' reads their own role document.
     *   - Request: { auth: { uid: 'user123' } }
     * @deny (read) User with UID 'user123' tries to read the role document of 'user456'.
     *   - Request: { auth: { uid: 'user123' } }
     * @principle Enforces user-ownership for reading roles.
     */
    match /roles/{userId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Only allows admins to read user profiles.
     * @path /users/{userId}
     * @allow (read) Admin user reads a user profile.
     *   - Request: { auth: { uid: 'admin123', token: { role: 'admin' } } }
     * @deny (read) Non-admin user tries to read a user profile.
     *   - Request: { auth: { uid: 'user123' } }
     * @principle Restricts user profile access to admins.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && request.auth.token.role == "admin";
      allow list: if isSignedIn() && request.auth.token.role == "admin";
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to read articles, and admins/editors to write.
     * @path /articles/{articleId}
     * @allow (read) Authenticated user reads an article.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (write) Admin user creates an article.
     *   - Request: { auth: { uid: 'admin123', token: { role: 'admin' } } }
     * @deny (write) Non-admin/editor user tries to create an article.
     *   - Request: { auth: { uid: 'user123' } }
     * @principle Allows public read access with restricted write access.
     */
    match /articles/{articleId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (request.auth.token.role == "admin" || request.auth.token.role == "editor");
      allow update: if isSignedIn() && (request.auth.token.role == "admin" || request.auth.token.role == "editor");
      allow delete: if isSignedIn() && (request.auth.token.role == "admin" || request.auth.token.role == "editor");
    }

    /**
     * @description Allows any authenticated user to read sectors, and admins/editors to write.
     * @path /sectors/{sectorId}
     * @allow (read) Authenticated user reads a sector.
     *   - Request: { auth: { uid: 'user123' } }
     * @allow (write) Editor user creates a sector.
     *   - Request: { auth: { uid: 'editor456', token: { role: 'editor' } } }
     * @deny (write) Non-admin/editor user tries to create a sector.
     *   - Request: { auth: { uid: 'user123' } }
     * @principle Allows public read access with restricted write access.
     */
    match /sectors/{sectorId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (request.auth.token.role == "admin" || request.auth.token.role == "editor");
      allow update: if isSignedIn() && (request.auth.token.role == "admin" || request.auth.token.role == "editor");
      allow delete: if isSignedIn() && (request.auth.token.role == "admin" || request.auth.token.role == "editor");
    }

     /**
      * @description Allows any authenticated user to read inventory, and admins/editors to write.
      * @path /inventory/{itemId}
      * @allow (read) Authenticated user reads an inventory item.
      *   - Request: { auth: { uid: 'user123' } }
      * @allow (write) Admin user creates an inventory item.
      *   - Request: { auth: { uid: 'admin123', token: { role: 'admin' } } }
      * @deny (write) Non-admin/editor user tries to create an inventory item.
      *   - Request: { auth: { uid: 'user123' } }
      * @principle Allows public read access with restricted write access.
      */
    match /inventory/{itemId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (request.auth.token.role == "admin" || request.auth.token.role == "editor");
      allow update: if isSignedIn() && (request.auth.token.role == "admin" || request.auth.token.role == "editor");
      allow delete: if isSignedIn() && (request.auth.token.role == "admin" || request.auth.token.role == "editor");
    }
  }
}

function isSignedIn() {
  return request.auth != null;
}