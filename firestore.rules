rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description User profiles are private and only accessible to the owning user.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with matching UID can (get, create, update, delete).
     * @deny (get, create, update, delete) User with non-matching UID cannot (get, create, update, delete).
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent listing all user profiles.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Sectors can be read by anyone, but only created/updated/deleted by admins.
     * @path /sectors/{sectorId}
     * @allow (get, list) Any user can read sectors.
     * @allow (create, update, delete) Only admins can create/update/delete sectors.
     * @deny (create, update, delete) Non-admins cannot create/update/delete sectors.
     * @principle Allows public read access with restricted write access based on role.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Machines can be read by anyone, but only created/updated/deleted by admins.
     * @path /machines/{machineId}
     * @allow (get, list) Any user can read machines.
     * @allow (create, update, delete) Only admins can create/update/delete machines.
     * @deny (create, update, delete) Non-admins cannot create/update/delete machines.
     * @principle Allows public read access with restricted write access based on role.
     */
    match /machines/{machineId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Inventory items can be read by anyone, but only created/updated/deleted by admins.
     * @path /inventory/{itemId}
     * @allow (get, list) Any user can read inventory items.
     * @allow (create, update, delete) Only admins can create/update/delete inventory items.
     * @deny (create, update, delete) Non-admins cannot create/update/delete inventory items.
     * @principle Allows public read access with restricted write access based on role.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Machine assignments can be read by anyone, but only created/updated/deleted by admins.
     * @path /machineAssignments/{assignmentId}
     * @allow (get, list) Any user can read machine assignments.
     * @allow (create, update, delete) Only admins can create/update/delete machine assignments.
     * @deny (create, update, delete) Non-admins cannot create/update/delete machine assignments.
     * @principle Allows public read access with restricted write access based on role.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description User roles are private and only manageable by admins.
     * @path /userRoles/{userId}
     * @allow (get, list) Only admins can read user roles.
     * @allow (create, update, delete) Only admins can create/update/delete user roles.
     * @deny (create, update, delete) Non-admins cannot create/update/delete user roles.
     * @principle Restricts role management to administrators.
     */
    match /userRoles/{userId} {
      allow get, list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}