/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /roles/{userId}: Stores user roles (e.g., "admin"), accessible only to the user themselves for reading, and restricted for writing.
 * - /sectors/{sectorId}: Stores sector information. Publicly readable.
 * - /machines/{machineId}: Stores machine information. Publicly readable.
 * - /inventoryItems/{itemId}: Stores inventory item information. Publicly readable.
 * - /machineAssignments/{machineAssignmentId}: Stores assignments of inventory items to machines. Publicly readable.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - User roles are readable by the user.
 * - Sectors, Machines, InventoryItems and MachineAssignments are publicly readable.
 * - All write operations are denied to prevent unauthorized data modification.
 *
 * Denormalization for Authorization:
 * - None. This ruleset relies on path-based and role-based authorization.  If more complex access controls are needed in the future, consider denormalizing role or ownership data onto the documents themselves to avoid costly `get()` operations in the rules.
 *
 * Structural Segregation:
 * - None. This ruleset does not segregate data into public and private collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (get) User with UID 'user456' cannot read user 'user123' profile.
     * @deny (create) User with UID 'user456' cannot create user 'user123' profile.
     * @deny (update) User with UID 'user456' cannot update user 'user123' profile.
     * @deny (delete) User with UID 'user456' cannot delete user 'user123' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user roles.
     * @path /databases/{database}/documents/roles/{userId}
     * @allow (get) User with UID 'user123' can read their own role.
     * @deny (create) No one can create roles directly.
     * @deny (update) No one can update roles directly.
     * @deny (delete) No one can delete roles directly.
     * @deny (list) Listing roles is not allowed.
     * @deny (get) User with UID 'user456' cannot read user 'user123' role.
     * @principle Restricts access to a user's own role.
     */
    match /roles/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to sectors.
     * @path /databases/{database}/documents/sectors/{sectorId}
     * @allow (get) Anyone can read sector information.
     * @allow (list) Anyone can list sectors.
     * @deny (create) No one can create sectors through client.
     * @deny (update) No one can update sectors through client.
     * @deny (delete) No one can delete sectors through client.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to machines.
     * @path /databases/{database}/documents/machines/{machineId}
     * @allow (get) Anyone can read machine information.
     * @allow (list) Anyone can list machines.
     * @deny (create) No one can create machines through client.
     * @deny (update) No one can update machines through client.
     * @deny (delete) No one can delete machines through client.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /machines/{machineId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to inventory items.
     * @path /databases/{database}/documents/inventoryItems/{itemId}
     * @allow (get) Anyone can read inventory item information.
     * @allow (list) Anyone can list inventory items.
     * @deny (create) No one can create inventory items through client.
     * @deny (update) No one can update inventory items through client.
     * @deny (delete) No one can delete inventory items through client.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /inventoryItems/{itemId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to machine assignments.
     * @path /databases/{database}/documents/machineAssignments/{machineAssignmentId}
     * @allow (get) Anyone can read machine assignment information.
     * @allow (list) Anyone can list machine assignments.
     * @deny (create) No one can create machine assignments through client.
     * @deny (update) No one can update machine assignments through client.
     * @deny (delete) No one can delete machine assignments through client.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /machineAssignments/{machineAssignmentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}