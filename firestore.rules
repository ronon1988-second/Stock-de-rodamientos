/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset allows any authenticated user to read and write to all collections.
 * This facilitates rapid prototyping by removing authorization barriers, but it
 * should be replaced with a more restrictive ruleset for production use.
 *
 * Data Structure:
 * All data is stored in root-level collections: /sectors, /inventory, etc.
 * There are subcollections under /sectors: /sectors/{sectorId}/machines/{machineId}.
 *
 * Key Security Decisions:
 * - Any signed-in user can read and write any document.
 * - This is NOT SECURE and should only be used for prototyping.
 *
 * Denormalization for Authorization: N/A (authorization is open to any signed-in user)
 * Structural Segregation: N/A (all data is globally accessible to signed-in users)
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read and write sectors.
     * @path /databases/{database}/documents/sectors/{sectorId}
     * @allow (get, list) Any signed-in user can read sector data.
     * @allow (create, update, delete) Any signed-in user can modify sector data.
     * @deny If the user is not signed in.
     * @principle Allows open access for any authenticated user.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write machines within a sector.
     * @path /databases/{database}/documents/sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) Any signed-in user can read machine data.
     * @allow (create, update, delete) Any signed-in user can modify machine data.
     * @deny If the user is not signed in.
     * @principle Allows open access for any authenticated user.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write inventory items.
     * @path /databases/{database}/documents/inventory/{inventoryId}
     * @allow (get, list) Any signed-in user can read inventory data.
     * @allow (create, update, delete) Any signed-in user can modify inventory data.
     * @deny If the user is not signed in.
     * @principle Allows open access for any authenticated user.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write machine assignments.
     * @path /databases/{database}/documents/machineAssignments/{assignmentId}
     * @allow (get, list) Any signed-in user can read assignment data.
     * @allow (create, update, delete) Any signed-in user can modify assignment data.
     * @deny If the user is not signed in.
     * @principle Allows open access for any authenticated user.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write usage logs.
     * @path /databases/{database}/documents/usageLog/{usageLogId}
     * @allow (get, list) Any signed-in user can read usage log data.
     * @allow (create, update, delete) Any signed-in user can modify usage log data.
     * @deny If the user is not signed in.
     * @principle Allows open access for any authenticated user.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    //-------------------  Helper functions  -------------------

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

  }
}