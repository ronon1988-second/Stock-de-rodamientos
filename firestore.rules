/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy: This ruleset prioritizes a secure, owner-centric model for user data while allowing public read access where appropriate. It avoids complex data validation to enable rapid prototyping and schema iteration.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /sectors/{sectorId}: Sectors within the plant, with public read but restricted write access.
 * - /sectors/{sectorId}/machines/{machineId}: Machines within a sector, with public read but restricted write access.
 * - /inventory/{itemId}: Inventory items, with public read but restricted write access.
 * - /usageLog/{logId}: Logs of usage data, accessible by all authenticated users.
 *
 * Key Security Decisions:
 * - User profiles are strictly private (owner-only access).
 * - Public read access is enabled for sectors, machines and inventory.
 * - Role-based access is not implemented in this version.
 *
 * Denormalization for Authorization:
 * - The rules assume that any ownership information (e.g., userId, authorId) is denormalized directly onto the documents being secured. This avoids costly `get()` calls in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Only the user can read/write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, create, update, delete, list) if the user's UID matches the userId.
     * @deny (get, create, update, delete, list) if the user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Anyone can read sector data, but only authenticated users can create, update, or delete sectors.
     * @path /databases/{database}/documents/sectors/{sectorId}
     * @allow (get, list) any user.
     * @allow (create, update, delete) only authenticated users.
     * @deny (create, update, delete) if the user is not authenticated.
     * @principle Allows public read access while restricting writes to authenticated users.
     */
    match /sectors/{sectorId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Anyone can read machine data, but only authenticated users can create, update, or delete machines.
     * @path /databases/{database}/documents/sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) any user.
     * @allow (create, update, delete) only authenticated users.
     * @deny (create, update, delete) if the user is not authenticated.
     * @principle Allows public read access while restricting writes to authenticated users.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Anyone can read inventory data, but only authenticated users can create, update, or delete inventory items.
     * @path /databases/{database}/documents/inventory/{itemId}
     * @allow (get, list) any user.
     * @allow (create, update, delete) only authenticated users.
     * @deny (create, update, delete) if the user is not authenticated.
     * @principle Allows public read access while restricting writes to authenticated users.
     */
    match /inventory/{itemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description All authenticated users can read usage log data. Only authenticated users can create usage log entries.
     * @path /databases/{database}/documents/usageLog/{logId}
     * @allow (get, list) any authenticated user.
     * @allow (create, update, delete) only authenticated users.
     * @deny (create, update, delete) if the user is not authenticated.
     * @principle Allows all authenticated users read access while restricting writes to authenticated users.
     */
    match /usageLog/{logId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}