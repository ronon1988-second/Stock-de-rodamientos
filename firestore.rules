rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner.
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all write operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Explicitly deny listing users.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to user roles.
     * @path /roles/{userId}
     * @allow (get, create, update, delete) if the user is an admin.
     * @deny (get, create, update, delete) if the user is not an admin.
     */
    match /roles/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }
      
      function isAdmin() {
          return request.auth.token.admin == true;
      }
        
      allow get: if isSignedIn() && isAdmin();
      allow list: if false; // Explicitly deny listing roles.
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows public read access to inventory items.
     * @path /inventory/{itemId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access but restricts write access.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to sectors.
     * @path /sectors/{sectorId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access but restricts write access.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to machines within a sector.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access but restricts write access.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

      /**
       * @description Allows public read access to machine assignments.
       * @path /machineAssignments/{assignmentId}
       * @allow (get, list) to anyone.
       * @deny (create, update, delete) to everyone.
       * @principle Allows public read access but restricts write access.
       */
    match /machineAssignments/{assignmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to usage logs.
     * @path /usageLog/{logId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access but restricts write access.
     */
    match /usageLog/{logId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}