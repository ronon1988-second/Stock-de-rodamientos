/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with an "admin" role.
 * Most data is publicly readable, but write access is restricted to users with the "admin" role.
 * User profiles and roles are managed under the /users/{userId} and /roles/{userId} paths respectively,
 * with ownership enforced on user profile creation.
 *
 * Data Structure:
 * - /inventory/{itemId}: Publicly readable inventory items.
 * - /sectors/{sectorId}: Publicly readable sector information.
 * - /sectors/{sectorId}/machines/{machineId}: Publicly readable machine information within sectors.
 * - /machineAssignments/{assignmentId}: Publicly readable assignments of items to machines.
 * - /usageLog/{logId}: Publicly readable logs of item usage.
 * - /users/{userId}: User profiles, only writable by the user themselves on creation.
 * - /roles/{userId}: User roles, only writable by admins.
 *
 * Key Security Decisions:
 * - Public read access for most collections to enable quick prototyping.
 * - Write access restricted to admins for most collections to prevent unauthorized modifications.
 * - User profile creation allowed only for the user themselves, with the uid validated on creation.
 * - No listing of users is allowed to protect user privacy.
 *
 * Denormalization for Authorization:
 *  - Roles are stored in a separate `/roles/{userId}` document to simplify role checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read inventory items, but restricts creation, updates, and deletion to admins.
     * @path /inventory/{itemId}
     * @allow (get, list): if true
     * @allow (create): if isAdmin()
     * @allow (update): if isAdmin()
     * @allow (delete): if isAdmin()
     * @deny (create): if !isAdmin()
     * @deny (update): if !isAdmin()
     * @deny (delete): if !isAdmin()
     * @principle Allows public read access with admin-only writes.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read sector information, but restricts creation, updates, and deletion to admins.
     * @path /sectors/{sectorId}
     * @allow (get, list): if true
     * @allow (create): if isAdmin()
     * @allow (update): if isAdmin()
     * @allow (delete): if isAdmin()
     * @deny (create): if !isAdmin()
     * @deny (update): if !isAdmin()
     * @deny (delete): if !isAdmin()
     * @principle Allows public read access with admin-only writes.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read machine information within a sector, but restricts creation, updates, and deletion to admins.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list): if true
     * @allow (create): if isAdmin()
     * @allow (update): if isAdmin()
     * @allow (delete): if isAdmin()
     * @deny (create): if !isAdmin()
     * @deny (update): if !isAdmin()
     * @deny (delete): if !isAdmin()
     * @principle Allows public read access with admin-only writes.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read machine assignments, but restricts creation, updates, and deletion to admins.
     * @path /machineAssignments/{assignmentId}
     * @allow (get, list): if true
     * @allow (create): if isAdmin()
     * @allow (update): if isAdmin()
     * @allow (delete): if isAdmin()
     * @deny (create): if !isAdmin()
     * @deny (update): if !isAdmin()
     * @deny (delete): if !isAdmin()
     * @principle Allows public read access with admin-only writes.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read usage logs, but restricts creation, updates, and deletion to admins.
     * @path /usageLog/{logId}
     * @allow (get, list): if true
     * @allow (create): if isAdmin()
     * @allow (update): if isAdmin()
     * @allow (delete): if isAdmin()
     * @deny (create): if !isAdmin()
     * @deny (update): if !isAdmin()
     * @deny (delete): if !isAdmin()
     * @principle Allows public read access with admin-only writes.
     */
    match /usageLog/{logId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows a user to create their own profile. Only admins can update or delete profiles.
     * @path /users/{userId}
     * @allow (create): if isOwner(userId) && request.resource.data.uid == userId
     * @allow (get): if isOwner(userId) || isAdmin()
     * @allow (update): if isAdmin()
     * @allow (delete): if isAdmin()
     * @deny (create): if !isOwner(userId) || request.resource.data.uid != userId
     * @deny (update): if !isAdmin()
     * @deny (delete): if !isAdmin()
     * @deny (list): if true
     * @principle Enforces user-ownership for profile creation and admin-only writes. Prevents listing users.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows only admins to manage user roles.
     * @path /roles/{userId}
     * @allow (create): if isAdmin()
     * @allow (get): if isAdmin()
     * @allow (update): if isAdmin()
     * @allow (delete): if isAdmin()
     * @deny (create): if !isAdmin()
     * @deny (get): if !isAdmin()
     * @deny (update): if !isAdmin()
     * @deny (delete): if !isAdmin()
     *  @deny (list): if true
     * @principle Restricts role management to admins.
     */
    match /roles/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && hasRole('admin');
    }

    function hasRole(role) {
          return request.auth.token.role == role;
    }
  }
}