/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-based access control.
 * It assumes a model where users own their data and can only access their own profiles and roles.
 * Data validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /roles/{userId}: Stores user roles, accessible only to the user themselves.
 * - /sectors/{sectorId}: Sectors data, accessible to authenticated users.
 * - /sectors/{sectorId}/machines/{machineId}: Machines data, accessible to authenticated users.
 * - /inventoryItems/{itemId}: Inventory items, accessible to authenticated users.
 * - /machineAssignments/{machineAssignmentId}: Machine assignments, accessible to authenticated users.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for privacy.
 * - Data validation is minimized to only authorization checks and relational integrity.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 *  - User Roles are stored in `/roles/{userId}` to simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner (signed in and the document exists)
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is signed in and the userId matches the resource id.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
    
    /**
     * @description Access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile if the UID matches the document ID.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (list) - Listing all users is prohibited.
     * @deny (create) - Creation is denied if the UID does not match the document ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Access control for user roles.
     * @path /roles/{userId}
     * @allow (get) - Authenticated user can get their own role.
     * @allow (create) - Authenticated user can create their own role if the UID matches the document ID.
     * @allow (update, delete) - Authenticated user can update/delete their own role.
     * @deny (list) - Listing all roles is prohibited.
     * @deny (create) - Creation is denied if the UID does not match the document ID.
     * @principle Enforces document ownership for writes.
     */
    match /roles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    
    /**
     * @description Access control for sectors.
     * @path /sectors/{sectorId}
     * @allow (get, list) - All authenticated users can read sectors.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete sectors.
     * @principle Requires authentication for all operations.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Access control for machines within sectors.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) - All authenticated users can read machines.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete machines.
     * @principle Requires authentication for all operations.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
    
    /**
     * @description Access control for inventory items.
     * @path /inventoryItems/{itemId}
     * @allow (get, list) - All authenticated users can read inventory items.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete inventory items.
     * @principle Requires authentication for all operations.
     */
    match /inventoryItems/{itemId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
    
    /**
     * @description Access control for machine assignments.
     * @path /machineAssignments/{machineAssignmentId}
     * @allow (get, list) - All authenticated users can read machine assignments.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete machine assignments.
     * @principle Requires authentication for all operations.
     */
    match /machineAssignments/{machineAssignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}