/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model:
 *   - User profiles are private and owned by the respective user.
 *   - Inventory, Sectors, Machines, MachineAssignments, and UsageLogs are accessible based on roles.
 *   - A "master user" (maurofbordon@gmail.com) bypasses role checks and has full access.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /roles/{userId}: User roles (e.g., admin, editor).
 * - /inventory/{itemId}: Global inventory items.
 * - /sectors/{sectorId}: Sectors within the plant.
 * - /sectors/{sectorId}/machines/{machineId}: Machines within each sector.
 * - /machineAssignments/{assignmentId}: Assignments of inventory items to machines.
 * - /usageLog/{logId}: Historical logs of item usage.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; users can only access their own profiles.
 * - Listing of users or roles is disallowed.
 * - The "master user" (maurofbordon@gmail.com) has full access, bypassing other role-based restrictions.
 *
 * Denormalization for Authorization:
 *  - User roles are stored in a separate `/roles/{userId}` document to simplify role checks.
 *  - MachineAssignments denormalize `itemName` for easier display.
 *
 * Structural Segregation:
 *  - No explicit segregation is used in this model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the "master user".
     * @return {boolean} True if the user is the master user, false otherwise.
     */
    function isMasterUser() {
      return isSignedIn() && request.auth.token.email == 'maurofbordon@gmail.com';
    }
     /**
      * @description Checks if a role exists for a user.
      * @param {string} roleId The user ID.
      * @return {boolean} True if the role exists, false otherwise.
      */
    function roleExists(roleId) {
      return exists(/databases/$(database)/documents/roles/$(roleId));
    }


    /**
     * @description Checks if the authenticated user has a specific role.
     * @param {string} role The role to check for (e.g., 'admin', 'editor').
     * @return {boolean} True if the user has the role, false otherwise.
     */
    function hasRole(role) {
      return isSignedIn() && roleExists(request.auth.uid) && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == role;
    }

     /**
      * @description Determines if the user is an admin.
      * @return {boolean} True if the user is an admin, false otherwise.
      */
    function isAdmin() {
       return isMasterUser() || hasRole('admin');
    }

     /**
      * @description Determines if the user is an editor.
      * @return {boolean} True if the user is an editor, false otherwise.
      */
    function isEditor() {
       return isMasterUser() || hasRole('editor') || isAdmin();
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User creates their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - User can only access/modify their own profile.
     * @deny (create) - User attempts to create a profile with a mismatched userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId && request.auth.token.email == request.resource.data.email;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rules for user roles.
      * @path /roles/{userId}
      * @allow (create, update, delete) - Only admin users can create, update, or delete roles. Master user can also do this.
      * @allow (get) - Only the user themselves can retrieve their role.
      * @deny (list) - Listing roles is not allowed.
      * @principle Restricts role management to admins and allows users to view their own role.
      */
    match /roles/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }


    /**
     * @description Rules for inventory items.
     * @path /inventory/{itemId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can create, update, or delete inventory items.
     * @deny (create, update, delete) - Non-admin users cannot modify inventory.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for sectors.
     * @path /sectors/{sectorId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can create, update, or delete sectors.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for machines within a sector.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can create, update, or delete machines.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for machine assignments.
     * @path /machineAssignments/{assignmentId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only editors and admins can create, update, or delete machine assignments.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if true;
      allow create: if isEditor();
      allow update: if isEditor();
      allow delete: if isEditor();
    }

    /**
     * @description Rules for usage logs.
     * @path /usageLog/{logId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Only editors and admins can create usage logs.
     * @allow (update, delete) - No updates or deletes allowed.
     */
    match /usageLog/{logId} {
      allow get, list: if true;
      allow create: if isEditor();
      allow update, delete: if false;
    }
  }
}