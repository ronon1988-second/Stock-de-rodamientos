/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-based authorization.
 * It allows rapid prototyping by omitting schema validation, focusing instead on
 * controlling access based on user identity and role.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /sectors/{sectorId}: Stores sector data, publicly readable, owner-writeable.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine data within a sector, publicly readable, owner-writeable.
 * - /inventoryItems/{inventoryItemId}: Stores inventory item data, publicly readable, owner-writeable.
 * - /sectors/{sectorId}/machineAssignments/{machineAssignmentId}: Stores machine assignments within a sector, publicly readable, owner-writeable.
 * - /usageLog/{usageLogId}: Stores usage logs. Only admins can list all logs. Users can create logs for themselves.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Public Read with Owner-Only Writes is used for sectors, machines, inventory items, and machine assignments.
 * - Usage logs can only be listed by admins. Users can create usage logs.
 *
 * Denormalization for Authorization:
 * - For sectors, machines, inventory items, and machine assignments, an 'ownerId' field is assumed to exist in the document
 *   to allow for secure owner-only writes.
 *
 * Structural Segregation:
 * - No structural segregation is used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (read, write) if the user's UID matches the userId. (create) if request.auth.uid == userId.
     * @deny (read, write) if the user's UID does not match the userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to sectors and restricts writes to the owner.
     * @path /databases/{database}/documents/sectors/{sectorId}
     * @allow (get, list) to everyone. (create) if request.auth.uid == request.resource.data.ownerId. (update, delete) if isOwner(resource.data.ownerId).
     * @deny (create, update, delete) if the user is not the owner of the sector.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /sectors/{sectorId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Grants public read access to machines and restricts writes to the owner.
     * @path /databases/{database}/documents/sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) to everyone. (create) if request.auth.uid == request.resource.data.ownerId. (update, delete) if isOwner(resource.data.ownerId).
     * @deny (create, update, delete) if the user is not the owner of the machine.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Grants public read access to inventory items and restricts writes to the owner.
     * @path /databases/{database}/documents/inventoryItems/{inventoryItemId}
     * @allow (get, list) to everyone. (create) if request.auth.uid == request.resource.data.ownerId. (update, delete) if isOwner(resource.data.ownerId).
     * @deny (create, update, delete) if the user is not the owner of the inventory item.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /inventoryItems/{inventoryItemId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Grants public read access to machine assignments and restricts writes to the owner.
     * @path /databases/{database}/documents/sectors/{sectorId}/machineAssignments/{machineAssignmentId}
     * @allow (get, list) to everyone. (create) if request.auth.uid == request.resource.data.ownerId. (update, delete) if isOwner(resource.data.ownerId).
     * @deny (create, update, delete) if the user is not the owner of the machine assignment.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /sectors/{sectorId}/machineAssignments/{machineAssignmentId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows admins to list usage logs and users to create their own logs.
     * @path /databases/{database}/documents/usageLog/{usageLogId}
     * @allow (list) to admins. (create) if request.auth.uid == request.resource.data.userId.
     * @deny (list) to non-admins. (create) if the user is not creating their own log.
     * @principle Restricts listing to admins and creation to the owning user.
     */
    match /usageLog/{usageLogId} {
      allow get: if false; // Getting a specific log is not allowed.
      allow list: if isAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if false; // Updating logs is not allowed.
      allow delete: if false; // Deleting logs is not allowed.
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
      return isSignedIn() && request.auth.token.email == 'maurofbordon@gmail.com';
  }
}