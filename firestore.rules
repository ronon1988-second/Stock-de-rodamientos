/**
 * @fileoverview Firestore Security Rules for the Plant Management Application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control model.
 * Admins have full access, editors can manage inventory and usage logs,
 * and all authenticated users have read-only access to all data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, including their role.
 * - /sectors/{sectorId}: Stores sector data.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine data within sectors.
 * - /inventory/{inventoryId}: Stores inventory item data.
 * - /machineAssignments/{assignmentId}: Stores machine assignment data.
 * - /usageLog/{usageLogId}: Stores item usage logs.
 *
 * Key Security Decisions:
 * - All authenticated users can read all data (sectors, machines, inventory, usage logs).
 * - Only admins can create, update, or delete sectors and machines.
 * - Editors and admins can create, update, and delete inventory items, machine assignments, and usage logs.
 * - User listing is implicitly denied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's role is "admin".
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the current user's role is "editor".
     */
    function isEditor() {
      return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'editor' || isAdmin());
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing resource
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their own profile if authenticated.
     * @allow (get) - User 'abc' can read their own profile if authenticated.
     * @allow (update) - User 'abc' can update their own profile if authenticated.
     * @deny (create) - User 'def' cannot create a profile with ID 'abc'.
     * @deny (delete) - Only the user themselves can delete their profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for sectors.
     * @path /sectors/{sectorId}
     * @allow (get) - Any authenticated user can read any sector.
     * @allow (list) - Any authenticated user can list sectors.
     * @allow (create) - Only admins can create sectors.
     * @allow (update) - Only admins can update sectors.
     * @allow (delete) - Only admins can delete sectors.
     * @deny (create) - Non-admins cannot create sectors.
     * @principle Read-only for all users, writeable by admins.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for machines within sectors.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get) - Any authenticated user can read any machine.
     * @allow (list) - Any authenticated user can list machines within a sector.
     * @allow (create) - Only admins can create machines.
     * @allow (update) - Only admins can update machines.
     * @allow (delete) - Only admins can delete machines.
     * @deny (create) - Non-admins cannot create machines.
     * @principle Read-only for all users, writeable by admins.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for inventory items.
     * @path /inventory/{inventoryId}
     * @allow (get) - Any authenticated user can read any inventory item.
     * @allow (list) - Any authenticated user can list inventory items.
     * @allow (create) - Only editors and admins can create inventory items.
     * @allow (update) - Only editors and admins can update inventory items.
     * @allow (delete) - Only editors and admins can delete inventory items.
     * @deny (create) - Non-editors/admins cannot create inventory items.
     * @principle Read-only for all users, writeable by editors and admins.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor();
      allow update: if isEditor() && resource != null;
      allow delete: if isEditor() && resource != null;
    }

    /**
     * @description Defines access rules for machine assignments.
     * @path /machineAssignments/{assignmentId}
     * @allow (get) - Any authenticated user can read any machine assignment.
     * @allow (list) - Any authenticated user can list machine assignments.
     * @allow (create) - Only editors and admins can create machine assignments.
     * @allow (update) - Only editors and admins can update machine assignments.
     * @allow (delete) - Only editors and admins can delete machine assignments.
     * @deny (create) - Non-editors/admins cannot create machine assignments.
     * @principle Read-only for all users, writeable by editors and admins.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor();
      allow update: if isEditor() && resource != null;
      allow delete: if isEditor() && resource != null;
    }

    /**
     * @description Defines access rules for usage logs.
     * @path /usageLog/{usageLogId}
     * @allow (get) - Any authenticated user can read any usage log.
     * @allow (list) - Any authenticated user can list usage logs.
     * @allow (create) - Only editors and admins can create usage logs.
     * @allow (update) - No one can update usage logs.
     * @allow (delete) - No one can delete usage logs.
     * @deny (create) - Non-editors/admins cannot create usage logs.
     * @principle Read-only for all users, writeable by editors and admins.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor();
      allow update: if false;
      allow delete: if false;
    }
  }
}