/**
 * @fileoverview Firestore Security Rules for the inventory management application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control system.  Users have a 'role' field
 * in their profile ('admin' or 'editor').  The rules enforce read-only access for all
 * authenticated users on most data, with admins having write access to sector and machine data,
 * and editors and admins having write access to inventory and usage log data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /sectors/{sectorId}: Stores sector information.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine information within sectors.
 * - /inventory/{inventoryId}: Stores inventory item information.
 * - /machineAssignments/{assignmentId}: Stores machine assignment information.
 * - /usageLog/{usageLogId}: Stores usage log information.
 *
 * Key Security Decisions:
 * - All authenticated users can read most data for visibility.
 * - Only users with the 'admin' role can create, update, or delete sectors and machines.
 * - Only users with the 'editor' or 'admin' roles can create, update, or delete inventory items, machine assignments and usage logs.
 * - User listing is implicitly disallowed.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly in the /users/{userId} document, enabling role checks
 *   without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner-only access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, update, delete) if the request is made by the user with matching {userId}.
     * @allow (create) if the authenticated user's UID matches the {userId} and enforces data consistency between the path and the document.
     * @deny (get, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants read-only access to all authenticated users, and write access to admins for sectors.
     * @path /databases/{database}/documents/sectors/{sectorId}
     * @allow (get, list) if the request is made by any authenticated user.
     * @allow (create, update, delete) if the request is made by a user with the 'admin' role.
     * @deny (create, update, delete) if the request is made by a user without the 'admin' role.
     * @principle Allows public read access with restricted write access based on user role.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants read-only access to all authenticated users, and write access to admins for machines within sectors.
     * @path /databases/{database}/documents/sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) if the request is made by any authenticated user.
     * @allow (create, update, delete) if the request is made by a user with the 'admin' role.
     * @deny (create, update, delete) if the request is made by a user without the 'admin' role.
     * @principle Allows public read access with restricted write access based on user role.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants read-only access to all authenticated users, and write access to editors and admins for inventory items.
     * @path /databases/{database}/documents/inventory/{inventoryId}
     * @allow (get, list) if the request is made by any authenticated user.
     * @allow (create, update, delete) if the request is made by a user with the 'editor' or 'admin' role.
     * @deny (create, update, delete) if the request is made by a user without the 'editor' or 'admin' role.
     * @principle Allows public read access with restricted write access based on user role.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor() || isAdmin();
      allow update: if (isEditor() || isAdmin()) && resource != null;
      allow delete: if (isEditor() || isAdmin()) && resource != null;
    }

    /**
     * @description Grants read-only access to all authenticated users, and write access to editors and admins for machine assignments.
     * @path /databases/{database}/documents/machineAssignments/{assignmentId}
     * @allow (get, list) if the request is made by any authenticated user.
     * @allow (create, update, delete) if the request is made by a user with the 'editor' or 'admin' role.
     * @deny (create, update, delete) if the request is made by a user without the 'editor' or 'admin' role.
     * @principle Allows public read access with restricted write access based on user role.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor() || isAdmin();
      allow update: if (isEditor() || isAdmin()) && resource != null;
      allow delete: if (isEditor() || isAdmin()) && resource != null;
    }

    /**
     * @description Grants read-only access to all authenticated users, and create access to editors and admins for usage logs.
     * @path /databases/{database}/documents/usageLog/{usageLogId}
     * @allow (get, list) if the request is made by any authenticated user.
     * @allow (create) if the request is made by a user with the 'editor' or 'admin' role.
     * @deny (create) if the request is made by a user without the 'editor' or 'admin' role.
     * @principle Allows public read access with restricted write access based on user role.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create: if isEditor() || isAdmin();
      allow update, delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, where document's id is the same as user id.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user has the 'editor' role.
     * @return {boolean} True if the user has the 'editor' role, false otherwise.
     */
    function isEditor() {
      return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'editor' || isAdmin());
    }
  }
}