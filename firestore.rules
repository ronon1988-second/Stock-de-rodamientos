/**
 * @fileoverview Firestore Security Rules for the Plant Management Application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control (RBAC) model. User roles are stored in the `/users/{userId}` document.
 * Admins have full control over sectors, machines and inventory, editors can manage inventory and log usage,
 * and all authenticated users have read access to all data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, including their role ('admin' or 'editor').
 * - /sectors/{sectorId}: Stores sector information.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machine information within each sector.
 * - /inventory/{inventoryId}: Stores inventory item information.
 * - /machineAssignments/{assignmentId}: Stores machine assignments.
 * - /usageLog/{usageLogId}: Stores usage logs.
 *
 * Key Security Decisions:
 * - Users collection is NOT listable to prevent discovery of user emails.
 * - Data is public for `get` and `list` to all signed-in users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's role is 'admin'.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user's role is 'editor'.
     */
    function isEditor() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'editor';
    }
    
    /**
     * @description Checks if the requesting user is the owner of the document.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the document and the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get, update, delete) Signed-in user can read their own profile.
     * @deny (create) Signed-in user cannot create a profile with a mismatched userId.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces user ownership for profile data and restricts listing of users.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for sectors.
     * @path /sectors/{sectorId}
     * @allow (get, list) Any signed-in user can read sectors.
     * @allow (create, update, delete) Only admins can manage sectors.
     * @deny (create, update, delete) Non-admins cannot manage sectors.
     * @principle Admins control sector data, others can only read.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for machines within sectors.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) Any signed-in user can read machines.
     * @allow (create, update, delete) Only admins can manage machines.
     * @deny (create, update, delete) Non-admins cannot manage machines.
     * @principle Admins control machine data, others can only read.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for inventory items.
     * @path /inventory/{inventoryId}
     * @allow (get, list) Any signed-in user can read inventory items.
     * @allow (create, update, delete) Only admins and editors can manage inventory items.
     * @deny (create, update, delete) Non-admins/editors cannot manage inventory items.
     * @principle Admins and editors control inventory data, others can only read.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin() || isEditor();
      allow update: if (isAdmin() || isEditor()) && resource != null;
      allow delete: if (isAdmin() || isEditor()) && resource != null;
    }

    /**
     * @description Rules for machine assignments.
     * @path /machineAssignments/{assignmentId}
     * @allow (get, list) Any signed-in user can read machine assignments.
     * @allow (create, update, delete) Only admins and editors can manage machine assignments.
     * @deny (create, update, delete) Non-admins/editors cannot manage machine assignments.
     * @principle Admins and editors control machine assignment data, others can only read.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin() || isEditor();
      allow update: if (isAdmin() || isEditor()) && resource != null;
      allow delete: if (isAdmin() || isEditor()) && resource != null;
    }

    /**
     * @description Rules for usage logs.
     * @path /usageLog/{usageLogId}
     * @allow (get, list) Any signed-in user can read usage logs.
     * @allow (create) Only admins and editors can create usage logs.
     * @deny (create) Non-admins/editors cannot create usage logs.
     * @principle Admins and editors control usage log creation, others can only read.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin() || isEditor();
      allow update: if false;
      allow delete: if false;
    }
  }
}