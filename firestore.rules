/**
 * @fileoverview Firestore Security Rules for the Inventory Management Application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control (RBAC) model, supplemented by ownership constraints where appropriate.
 * Users are assigned roles ('admin' or 'editor') that determine their permissions.  Authenticated users can read almost all data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, keyed by their Firebase Auth UID.  Used to determine user roles.
 * - /sectors/{sectorId}: Stores sectors.
 * - /sectors/{sectorId}/machines/{machineId}: Stores machines within sectors.
 * - /inventory/{inventoryId}: Stores inventory items.
 * - /machineAssignments/{assignmentId}: Stores machine assignments.
 * - /usageLog/{usageLogId}: Stores usage logs.
 *
 * Key Security Decisions:
 * - Roles are stored in the /users/{userId} document and are used to control access to other collections.
 * - The `list` operation on `/users` is denied to prevent unauthorized enumeration of user accounts.
 * - All authenticated users can read most data (sectors, machines, inventory, assignments, logs).
 * - Admins have full control over sectors and machines.
 * - Editors can manage inventory, assignments, and create usage logs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Authentication required for all protected operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's UID matches the provided userId.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Enforces user ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an existing owner (signed in, isOwner, and document exists).
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Enforces user ownership and document existence for updates and deletes.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has the 'admin' role.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Requires admin role for privileged operations.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the current user has the 'editor' role.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Requires editor role for privileged operations.
     */
    function isEditor() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'editor';
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile if the UID matches.
     * @allow (get) Any signed-in user can read a profile.
     * @deny (create) A user cannot create a profile for another user.
     * @deny (update) A user cannot modify another user's profile.
     * @principle Enforces user-ownership for profile creation, read-only for others.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description Rules for sectors.
     * @path /sectors/{sectorId}
     * @allow (get, list) Any signed-in user can read sectors.
     * @allow (create, update, delete) Only admins can manage sectors.
     * @deny (create, update, delete) Non-admins cannot manage sectors.
     * @principle Read-only for all users, writeable by admins.
     */
    match /sectors/{sectorId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for machines within sectors.
     * @path /sectors/{sectorId}/machines/{machineId}
     * @allow (get, list) Any signed-in user can read machines.
     * @allow (create, update, delete) Only admins can manage machines.
     * @deny (create, update, delete) Non-admins cannot manage machines.
     * @principle Read-only for all users, writeable by admins.
     */
    match /sectors/{sectorId}/machines/{machineId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Rules for inventory items.
     * @path /inventory/{inventoryId}
     * @allow (get, list) Any signed-in user can read inventory items.
     * @allow (create, update, delete) Only editors and admins can manage inventory items.
     * @deny (create, update, delete) Non-editors/admins cannot manage inventory items.
     * @principle Read-only for all users, writeable by editors and admins.
     */
    match /inventory/{inventoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
      allow delete: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
    }

    /**
     * @description Rules for machine assignments.
     * @path /machineAssignments/{assignmentId}
     * @allow (get, list) Any signed-in user can read machine assignments.
     * @allow (create, update, delete) Only editors and admins can manage machine assignments.
     * @deny (create, update, delete) Non-editors/admins cannot manage machine assignments.
     * @principle Read-only for all users, writeable by editors and admins.
     */
    match /machineAssignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
      allow delete: if isSignedIn() && (isAdmin() || isEditor()) && resource != null;
    }

    /**
     * @description Rules for usage logs.
     * @path /usageLog/{usageLogId}
     * @allow (get, list) Any signed-in user can read usage logs.
     * @allow (create) Only editors and admins can create usage logs.
     * @deny (update, delete) Usage logs cannot be updated or deleted.
     * @principle Read-only for all users, createable by editors and admins.
     */
    match /usageLog/{usageLogId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isEditor());
      allow update: if false;
      allow delete: if false;
    }
  }
}